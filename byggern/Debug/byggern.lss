
byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002a2  00800100  00001d56  00001dea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d56  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002a  008003a2  008003a2  0000208c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000208c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000258  00000000  00000000  000020e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002e66  00000000  00000000  00002340  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ed4  00000000  00000000  000051a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d3f  00000000  00000000  0000607a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000724  00000000  00000000  00006dbc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000095e  00000000  00000000  000074e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001b28  00000000  00000000  00007e3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000218  00000000  00000000  00009966  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 60 04 	jmp	0x8c0	; 0x8c0 <__vector_17>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <joystick_get_direction+0x34>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	13 e0       	ldi	r17, 0x03	; 3
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e6 e5       	ldi	r30, 0x56	; 86
     37c:	fd e1       	ldi	r31, 0x1D	; 29
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	a2 3a       	cpi	r26, 0xA2	; 162
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	23 e0       	ldi	r18, 0x03	; 3
     38c:	a2 ea       	ldi	r26, 0xA2	; 162
     38e:	b3 e0       	ldi	r27, 0x03	; 3
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	ac 3c       	cpi	r26, 0xCC	; 204
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 0c 02 	call	0x418	; 0x418 <main>
     39e:	0c 94 a9 0e 	jmp	0x1d52	; 0x1d52 <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <ADC_init>:

void ADC_init(void){
	
	//INITIALIZE INTERRUPT ON PIN PD3
	// Button input
	clear_bit(DDRD, PD3);
     3a6:	8b 98       	cbi	0x11, 3	; 17
	set_bit(PORTD, PD3);	//Set pull-up resistor
     3a8:	93 9a       	sbi	0x12, 3	; 18
	// Disable global interrupts
	cli();
     3aa:	f8 94       	cli
	// Interrupt on falling edge PD3
	set_bit(MCUCR, ISC11);
     3ac:	85 b7       	in	r24, 0x35	; 53
     3ae:	88 60       	ori	r24, 0x08	; 8
     3b0:	85 bf       	out	0x35, r24	; 53
	clear_bit(MCUCR, ISC10);
     3b2:	85 b7       	in	r24, 0x35	; 53
     3b4:	8b 7f       	andi	r24, 0xFB	; 251
     3b6:	85 bf       	out	0x35, r24	; 53
	// Enable interrupt on PD3
	set_bit(GICR,INT1);
     3b8:	8b b7       	in	r24, 0x3b	; 59
     3ba:	80 68       	ori	r24, 0x80	; 128
     3bc:	8b bf       	out	0x3b, r24	; 59
	// Enable global interrupts
	sei();
     3be:	78 94       	sei
     3c0:	08 95       	ret

000003c2 <get_ADC_data>:
}

char get_ADC_data(void){
	ADC_data = ext_adc[0x00];
     3c2:	e0 91 0a 01 	lds	r30, 0x010A
     3c6:	f0 91 0b 01 	lds	r31, 0x010B
     3ca:	80 81       	ld	r24, Z
     3cc:	80 93 ac 03 	sts	0x03AC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3d0:	84 e1       	ldi	r24, 0x14	; 20
     3d2:	8a 95       	dec	r24
     3d4:	f1 f7       	brne	.-4      	; 0x3d2 <get_ADC_data+0x10>
	_delay_us(60);
	return ADC_data;
     3d6:	80 91 ac 03 	lds	r24, 0x03AC
}
     3da:	08 95       	ret

000003dc <ADC_start_read>:

void ADC_start_read(channel_t channel){
	
	char data = 0x00;
	
	switch (channel) {
     3dc:	81 30       	cpi	r24, 0x01	; 1
     3de:	a9 f0       	breq	.+42     	; 0x40a <ADC_start_read+0x2e>
     3e0:	90 f0       	brcs	.+36     	; 0x406 <ADC_start_read+0x2a>
     3e2:	82 30       	cpi	r24, 0x02	; 2
     3e4:	19 f0       	breq	.+6      	; 0x3ec <ADC_start_read+0x10>
     3e6:	83 30       	cpi	r24, 0x03	; 3
     3e8:	19 f0       	breq	.+6      	; 0x3f0 <ADC_start_read+0x14>
     3ea:	04 c0       	rjmp	.+8      	; 0x3f4 <ADC_start_read+0x18>
	
		data = 0x05;
		break;
		case CHANNEL3 :
		
		data = 0x06;
     3ec:	86 e0       	ldi	r24, 0x06	; 6
		break;
     3ee:	0e c0       	rjmp	.+28     	; 0x40c <ADC_start_read+0x30>
		case CHANNEL4 :
		
		data = 0x07;
     3f0:	87 e0       	ldi	r24, 0x07	; 7
		break;
     3f2:	0c c0       	rjmp	.+24     	; 0x40c <ADC_start_read+0x30>
		default:
		printf("Not valid channel");
     3f4:	84 e3       	ldi	r24, 0x34	; 52
     3f6:	91 e0       	ldi	r25, 0x01	; 1
     3f8:	9f 93       	push	r25
     3fa:	8f 93       	push	r24
     3fc:	0e 94 8e 0b 	call	0x171c	; 0x171c <printf>
		return EXIT_FAILURE;
     400:	0f 90       	pop	r0
     402:	0f 90       	pop	r0
     404:	08 95       	ret
	
	char data = 0x00;
	
	switch (channel) {
		case CHANNEL1 :
		data = 0x04;
     406:	84 e0       	ldi	r24, 0x04	; 4
     408:	01 c0       	rjmp	.+2      	; 0x40c <ADC_start_read+0x30>
		break;
		case CHANNEL2 :
	
		data = 0x05;
     40a:	85 e0       	ldi	r24, 0x05	; 5
		default:
		printf("Not valid channel");
		return EXIT_FAILURE;
	}
	
	ext_adc[0x00] = data;
     40c:	e0 91 0a 01 	lds	r30, 0x010A
     410:	f0 91 0b 01 	lds	r31, 0x010B
     414:	80 83       	st	Z, r24
     416:	08 95       	ret

00000418 <main>:
}

int main(void)

{
	USART_Init( MYUBRR);
     418:	8f e1       	ldi	r24, 0x1F	; 31
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	0e 94 4e 09 	call	0x129c	; 0x129c <USART_Init>
	SRAM_Init();
     420:	0e 94 b6 08 	call	0x116c	; 0x116c <SRAM_Init>
	ADC_init();
     424:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <ADC_init>
	SRAM_test();
     428:	0e 94 bd 08 	call	0x117a	; 0x117a <SRAM_test>
	//OLED_Init();
	oled_init();
     42c:	0e 94 c0 03 	call	0x780	; 0x780 <oled_init>
	int prescaler = 1024;
	joystick_init(prescaler);
     430:	80 e0       	ldi	r24, 0x00	; 0
     432:	94 e0       	ldi	r25, 0x04	; 4
     434:	0e 94 3a 05 	call	0xa74	; 0xa74 <joystick_init>
	oled_menu_init();
     438:	0e 94 06 07 	call	0xe0c	; 0xe0c <oled_menu_init>
	
	while(1){
	//PrintMenu();
	//ex3();	
	//oled_printf("Please Work!")	;
	oled_menu_selection();
     43c:	0e 94 c2 07 	call	0xf84	; 0xf84 <oled_menu_selection>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     440:	2f ef       	ldi	r18, 0xFF	; 255
     442:	8f ef       	ldi	r24, 0xFF	; 255
     444:	92 e0       	ldi	r25, 0x02	; 2
     446:	21 50       	subi	r18, 0x01	; 1
     448:	80 40       	sbci	r24, 0x00	; 0
     44a:	90 40       	sbci	r25, 0x00	; 0
     44c:	e1 f7       	brne	.-8      	; 0x446 <main+0x2e>
     44e:	00 c0       	rjmp	.+0      	; 0x450 <main+0x38>
     450:	00 c0       	rjmp	.+0      	; 0x452 <main+0x3a>
     452:	f4 cf       	rjmp	.-24     	; 0x43c <main+0x24>

00000454 <oled_is_out_of_bounds>:
volatile int fontsize = 8;
//const char* const font[] progmem = {font_4x6, font_5x7, font_5x7w, font_8x8};
//int current_font = font_8x8;

void oled_is_out_of_bounds() {
	if (position.col > 127) {
     454:	80 91 af 03 	lds	r24, 0x03AF
     458:	90 91 b0 03 	lds	r25, 0x03B0
     45c:	80 38       	cpi	r24, 0x80	; 128
     45e:	91 05       	cpc	r25, r1
     460:	bc f0       	brlt	.+46     	; 0x490 <oled_is_out_of_bounds+0x3c>
		position.col -= 128;
     462:	ef ea       	ldi	r30, 0xAF	; 175
     464:	f3 e0       	ldi	r31, 0x03	; 3
     466:	80 81       	ld	r24, Z
     468:	91 81       	ldd	r25, Z+1	; 0x01
     46a:	80 58       	subi	r24, 0x80	; 128
     46c:	91 09       	sbc	r25, r1
     46e:	91 83       	std	Z+1, r25	; 0x01
     470:	80 83       	st	Z, r24
		position.row += 1;
     472:	ed ea       	ldi	r30, 0xAD	; 173
     474:	f3 e0       	ldi	r31, 0x03	; 3
     476:	80 81       	ld	r24, Z
     478:	91 81       	ldd	r25, Z+1	; 0x01
     47a:	01 96       	adiw	r24, 0x01	; 1
     47c:	91 83       	std	Z+1, r25	; 0x01
     47e:	80 83       	st	Z, r24
		if (position.row > 7) {
     480:	80 81       	ld	r24, Z
     482:	91 81       	ldd	r25, Z+1	; 0x01
     484:	08 97       	sbiw	r24, 0x08	; 8
     486:	24 f0       	brlt	.+8      	; 0x490 <oled_is_out_of_bounds+0x3c>
			position.row = 0;
     488:	10 92 ae 03 	sts	0x03AE, r1
     48c:	10 92 ad 03 	sts	0x03AD, r1
     490:	08 95       	ret

00000492 <oled_put_char>:

void write_data(uint8_t data){
	ext_oled_data[0] = data;
}

int oled_put_char(unsigned char c){
     492:	ef 92       	push	r14
     494:	ff 92       	push	r15
     496:	0f 93       	push	r16
     498:	1f 93       	push	r17
     49a:	cf 93       	push	r28
     49c:	df 93       	push	r29
	uint8_t printchar = c-32; // Chooses character (position in table) from fonts array
     49e:	80 52       	subi	r24, 0x20	; 32
	
	for (int i=0; i < fontsize; i++) {
     4a0:	20 91 0c 01 	lds	r18, 0x010C
     4a4:	30 91 0d 01 	lds	r19, 0x010D
     4a8:	12 16       	cp	r1, r18
     4aa:	13 06       	cpc	r1, r19
     4ac:	84 f5       	brge	.+96     	; 0x50e <__stack+0xf>
     4ae:	e8 2e       	mov	r14, r24
     4b0:	f1 2c       	mov	r15, r1
     4b2:	c7 01       	movw	r24, r14
     4b4:	88 0f       	add	r24, r24
     4b6:	99 1f       	adc	r25, r25
     4b8:	88 0f       	add	r24, r24
     4ba:	99 1f       	adc	r25, r25
     4bc:	88 0f       	add	r24, r24
     4be:	99 1f       	adc	r25, r25
     4c0:	c0 e0       	ldi	r28, 0x00	; 0
     4c2:	d0 e0       	ldi	r29, 0x00	; 0
     4c4:	9c 01       	movw	r18, r24
     4c6:	20 59       	subi	r18, 0x90	; 144
     4c8:	3f 4f       	sbci	r19, 0xFF	; 255
     4ca:	79 01       	movw	r14, r18
		write_data(pgm_read_word(&font8[printchar][i])); // pgm_read_word reads double word (64 bits/8 bytes)
		position.col += fontsize;
     4cc:	0f ea       	ldi	r16, 0xAF	; 175
     4ce:	13 e0       	ldi	r17, 0x03	; 3
     4d0:	f7 01       	movw	r30, r14
     4d2:	ec 0f       	add	r30, r28
     4d4:	fd 1f       	adc	r31, r29

int oled_put_char(unsigned char c){
	uint8_t printchar = c-32; // Chooses character (position in table) from fonts array
	
	for (int i=0; i < fontsize; i++) {
		write_data(pgm_read_word(&font8[printchar][i])); // pgm_read_word reads double word (64 bits/8 bytes)
     4d6:	85 91       	lpm	r24, Z+
     4d8:	94 91       	lpm	r25, Z
void write_command(uint8_t command){
	ext_oled_cmd[0] = command;
}

void write_data(uint8_t data){
	ext_oled_data[0] = data;
     4da:	e0 91 0e 01 	lds	r30, 0x010E
     4de:	f0 91 0f 01 	lds	r31, 0x010F
     4e2:	80 83       	st	Z, r24
int oled_put_char(unsigned char c){
	uint8_t printchar = c-32; // Chooses character (position in table) from fonts array
	
	for (int i=0; i < fontsize; i++) {
		write_data(pgm_read_word(&font8[printchar][i])); // pgm_read_word reads double word (64 bits/8 bytes)
		position.col += fontsize;
     4e4:	f8 01       	movw	r30, r16
     4e6:	20 81       	ld	r18, Z
     4e8:	31 81       	ldd	r19, Z+1	; 0x01
     4ea:	80 91 0c 01 	lds	r24, 0x010C
     4ee:	90 91 0d 01 	lds	r25, 0x010D
     4f2:	82 0f       	add	r24, r18
     4f4:	93 1f       	adc	r25, r19
     4f6:	91 83       	std	Z+1, r25	; 0x01
     4f8:	80 83       	st	Z, r24
		oled_is_out_of_bounds();
     4fa:	0e 94 2a 02 	call	0x454	; 0x454 <oled_is_out_of_bounds>
}

int oled_put_char(unsigned char c){
	uint8_t printchar = c-32; // Chooses character (position in table) from fonts array
	
	for (int i=0; i < fontsize; i++) {
     4fe:	21 96       	adiw	r28, 0x01	; 1
     500:	80 91 0c 01 	lds	r24, 0x010C
     504:	90 91 0d 01 	lds	r25, 0x010D
     508:	c8 17       	cp	r28, r24
     50a:	d9 07       	cpc	r29, r25
     50c:	0c f3       	brlt	.-62     	; 0x4d0 <oled_put_char+0x3e>
		position.col += fontsize;
		oled_is_out_of_bounds();
	}
	
	return 0;
}
     50e:	80 e0       	ldi	r24, 0x00	; 0
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	df 91       	pop	r29
     514:	cf 91       	pop	r28
     516:	1f 91       	pop	r17
     518:	0f 91       	pop	r16
     51a:	ff 90       	pop	r15
     51c:	ef 90       	pop	r14
     51e:	08 95       	ret

00000520 <oled_inv_put_char>:

int oled_inv_put_char(unsigned char c){
     520:	ef 92       	push	r14
     522:	ff 92       	push	r15
     524:	0f 93       	push	r16
     526:	1f 93       	push	r17
     528:	cf 93       	push	r28
     52a:	df 93       	push	r29
	uint8_t printchar = c-32;
     52c:	80 52       	subi	r24, 0x20	; 32
	
	for (int i=0; i < fontsize; i++) {
     52e:	20 91 0c 01 	lds	r18, 0x010C
     532:	30 91 0d 01 	lds	r19, 0x010D
     536:	12 16       	cp	r1, r18
     538:	13 06       	cpc	r1, r19
     53a:	8c f5       	brge	.+98     	; 0x59e <oled_inv_put_char+0x7e>
     53c:	e8 2e       	mov	r14, r24
     53e:	f1 2c       	mov	r15, r1
     540:	c7 01       	movw	r24, r14
     542:	88 0f       	add	r24, r24
     544:	99 1f       	adc	r25, r25
     546:	88 0f       	add	r24, r24
     548:	99 1f       	adc	r25, r25
     54a:	88 0f       	add	r24, r24
     54c:	99 1f       	adc	r25, r25
     54e:	c0 e0       	ldi	r28, 0x00	; 0
     550:	d0 e0       	ldi	r29, 0x00	; 0
     552:	9c 01       	movw	r18, r24
     554:	20 59       	subi	r18, 0x90	; 144
     556:	3f 4f       	sbci	r19, 0xFF	; 255
     558:	79 01       	movw	r14, r18
		write_data(~pgm_read_word(&font8[printchar][i]));
		position.col += fontsize;
     55a:	0f ea       	ldi	r16, 0xAF	; 175
     55c:	13 e0       	ldi	r17, 0x03	; 3
     55e:	f7 01       	movw	r30, r14
     560:	ec 0f       	add	r30, r28
     562:	fd 1f       	adc	r31, r29

int oled_inv_put_char(unsigned char c){
	uint8_t printchar = c-32;
	
	for (int i=0; i < fontsize; i++) {
		write_data(~pgm_read_word(&font8[printchar][i]));
     564:	85 91       	lpm	r24, Z+
     566:	94 91       	lpm	r25, Z
     568:	80 95       	com	r24
void write_command(uint8_t command){
	ext_oled_cmd[0] = command;
}

void write_data(uint8_t data){
	ext_oled_data[0] = data;
     56a:	e0 91 0e 01 	lds	r30, 0x010E
     56e:	f0 91 0f 01 	lds	r31, 0x010F
     572:	80 83       	st	Z, r24
int oled_inv_put_char(unsigned char c){
	uint8_t printchar = c-32;
	
	for (int i=0; i < fontsize; i++) {
		write_data(~pgm_read_word(&font8[printchar][i]));
		position.col += fontsize;
     574:	f8 01       	movw	r30, r16
     576:	20 81       	ld	r18, Z
     578:	31 81       	ldd	r19, Z+1	; 0x01
     57a:	80 91 0c 01 	lds	r24, 0x010C
     57e:	90 91 0d 01 	lds	r25, 0x010D
     582:	82 0f       	add	r24, r18
     584:	93 1f       	adc	r25, r19
     586:	91 83       	std	Z+1, r25	; 0x01
     588:	80 83       	st	Z, r24
		oled_is_out_of_bounds();
     58a:	0e 94 2a 02 	call	0x454	; 0x454 <oled_is_out_of_bounds>
}

int oled_inv_put_char(unsigned char c){
	uint8_t printchar = c-32;
	
	for (int i=0; i < fontsize; i++) {
     58e:	21 96       	adiw	r28, 0x01	; 1
     590:	80 91 0c 01 	lds	r24, 0x010C
     594:	90 91 0d 01 	lds	r25, 0x010D
     598:	c8 17       	cp	r28, r24
     59a:	d9 07       	cpc	r29, r25
     59c:	04 f3       	brlt	.-64     	; 0x55e <oled_inv_put_char+0x3e>
		position.col += fontsize;
		oled_is_out_of_bounds();
	}
	
	return 0;
}
     59e:	80 e0       	ldi	r24, 0x00	; 0
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	df 91       	pop	r29
     5a4:	cf 91       	pop	r28
     5a6:	1f 91       	pop	r17
     5a8:	0f 91       	pop	r16
     5aa:	ff 90       	pop	r15
     5ac:	ef 90       	pop	r14
     5ae:	08 95       	ret

000005b0 <oled_set_adressing_mode>:
		//fontsize = 8;
	//}
//}

void write_command(uint8_t command){
	ext_oled_cmd[0] = command;
     5b0:	e0 91 10 01 	lds	r30, 0x0110
     5b4:	f0 91 11 01 	lds	r31, 0x0111
     5b8:	90 e2       	ldi	r25, 0x20	; 32
     5ba:	90 83       	st	Z, r25
     5bc:	e0 91 10 01 	lds	r30, 0x0110
     5c0:	f0 91 11 01 	lds	r31, 0x0111
     5c4:	80 83       	st	Z, r24
     5c6:	08 95       	ret

000005c8 <oled_printf>:
	write_command(mode);
}

// ------------------ functions declared in header below this line---------------------

void oled_printf(char* data, ...){
     5c8:	cf 93       	push	r28
     5ca:	df 93       	push	r29
     5cc:	cd b7       	in	r28, 0x3d	; 61
     5ce:	de b7       	in	r29, 0x3e	; 62
     5d0:	fe 01       	movw	r30, r28
     5d2:	35 96       	adiw	r30, 0x05	; 5
     5d4:	61 91       	ld	r22, Z+
     5d6:	71 91       	ld	r23, Z+
	va_list args; // accept varying number of arguments
	va_start(args, data);
	vfprintf(&mystdout, data, args);
     5d8:	af 01       	movw	r20, r30
     5da:	80 e2       	ldi	r24, 0x20	; 32
     5dc:	91 e0       	ldi	r25, 0x01	; 1
     5de:	0e 94 cf 0b 	call	0x179e	; 0x179e <vfprintf>
	va_end(args);
	
}
     5e2:	df 91       	pop	r29
     5e4:	cf 91       	pop	r28
     5e6:	08 95       	ret

000005e8 <oled_inv_printf>:

void oled_inv_printf(char* data, ...){
     5e8:	cf 93       	push	r28
     5ea:	df 93       	push	r29
     5ec:	cd b7       	in	r28, 0x3d	; 61
     5ee:	de b7       	in	r29, 0x3e	; 62
     5f0:	fe 01       	movw	r30, r28
     5f2:	35 96       	adiw	r30, 0x05	; 5
     5f4:	61 91       	ld	r22, Z+
     5f6:	71 91       	ld	r23, Z+
	va_list args;
	va_start(args, data);
	vfprintf(&myinvstdout, data, args);
     5f8:	af 01       	movw	r20, r30
     5fa:	82 e1       	ldi	r24, 0x12	; 18
     5fc:	91 e0       	ldi	r25, 0x01	; 1
     5fe:	0e 94 cf 0b 	call	0x179e	; 0x179e <vfprintf>
	va_end(args);
	
}
     602:	df 91       	pop	r29
     604:	cf 91       	pop	r28
     606:	08 95       	ret

00000608 <long_string>:

int long_string(char* data){
	if (strlen(data)*fontsize > 128){
     608:	fc 01       	movw	r30, r24
     60a:	01 90       	ld	r0, Z+
     60c:	00 20       	and	r0, r0
     60e:	e9 f7       	brne	.-6      	; 0x60a <long_string+0x2>
     610:	31 97       	sbiw	r30, 0x01	; 1
     612:	e8 1b       	sub	r30, r24
     614:	f9 0b       	sbc	r31, r25
     616:	80 91 0c 01 	lds	r24, 0x010C
     61a:	90 91 0d 01 	lds	r25, 0x010D
     61e:	e8 9f       	mul	r30, r24
     620:	90 01       	movw	r18, r0
     622:	e9 9f       	mul	r30, r25
     624:	30 0d       	add	r19, r0
     626:	f8 9f       	mul	r31, r24
     628:	30 0d       	add	r19, r0
     62a:	11 24       	eor	r1, r1
     62c:	81 e0       	ldi	r24, 0x01	; 1
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	21 38       	cpi	r18, 0x81	; 129
     632:	31 05       	cpc	r19, r1
     634:	10 f4       	brcc	.+4      	; 0x63a <long_string+0x32>
     636:	80 e0       	ldi	r24, 0x00	; 0
     638:	90 e0       	ldi	r25, 0x00	; 0
		return 1;
	}
	return 0;
}
     63a:	08 95       	ret

0000063c <oled_goto_line>:

void oled_home(){
	oled_pos(0,0);
}

void oled_goto_line(int line){
     63c:	cf 93       	push	r28
     63e:	df 93       	push	r29
     640:	ec 01       	movw	r28, r24
	if (line > 7 || line < 0) {
     642:	88 30       	cpi	r24, 0x08	; 8
     644:	91 05       	cpc	r25, r1
     646:	80 f4       	brcc	.+32     	; 0x668 <oled_goto_line+0x2c>
		return 0;
	}
	else {
		position.row = line;
     648:	90 93 ae 03 	sts	0x03AE, r25
     64c:	80 93 ad 03 	sts	0x03AD, r24
		oled_set_adressing_mode(page_mode);
     650:	82 e0       	ldi	r24, 0x02	; 2
     652:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <oled_set_adressing_mode>
		write_command(0xb0 + line);
     656:	c0 55       	subi	r28, 0x50	; 80
		//fontsize = 8;
	//}
//}

void write_command(uint8_t command){
	ext_oled_cmd[0] = command;
     658:	e0 91 10 01 	lds	r30, 0x0110
     65c:	f0 91 11 01 	lds	r31, 0x0111
     660:	c0 83       	st	Z, r28
	}
	else {
		position.row = line;
		oled_set_adressing_mode(page_mode);
		write_command(0xb0 + line);
		oled_set_adressing_mode(horizontal_mode);
     662:	80 e0       	ldi	r24, 0x00	; 0
     664:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <oled_set_adressing_mode>
	}
}
     668:	df 91       	pop	r29
     66a:	cf 91       	pop	r28
     66c:	08 95       	ret

0000066e <oled_goto_column>:

void oled_goto_column(int column){
     66e:	cf 93       	push	r28
     670:	df 93       	push	r29
     672:	ec 01       	movw	r28, r24
	if (column > 127 || column < 0) {
     674:	80 38       	cpi	r24, 0x80	; 128
     676:	91 05       	cpc	r25, r1
     678:	50 f5       	brcc	.+84     	; 0x6ce <oled_goto_column+0x60>
		return 0;
	}
	else {
		position.col = column;
     67a:	90 93 b0 03 	sts	0x03B0, r25
     67e:	80 93 af 03 	sts	0x03AF, r24
		oled_set_adressing_mode(page_mode);
     682:	82 e0       	ldi	r24, 0x02	; 2
     684:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <oled_set_adressing_mode>
		
		int numlow = column % 16;
     688:	ce 01       	movw	r24, r28
     68a:	8f 70       	andi	r24, 0x0F	; 15
     68c:	90 78       	andi	r25, 0x80	; 128
     68e:	99 23       	and	r25, r25
     690:	24 f4       	brge	.+8      	; 0x69a <oled_goto_column+0x2c>
     692:	01 97       	sbiw	r24, 0x01	; 1
     694:	80 6f       	ori	r24, 0xF0	; 240
     696:	9f 6f       	ori	r25, 0xFF	; 255
     698:	01 96       	adiw	r24, 0x01	; 1
		//fontsize = 8;
	//}
//}

void write_command(uint8_t command){
	ext_oled_cmd[0] = command;
     69a:	e0 91 10 01 	lds	r30, 0x0110
     69e:	f0 91 11 01 	lds	r31, 0x0111
     6a2:	80 83       	st	Z, r24
	else {
		position.col = column;
		oled_set_adressing_mode(page_mode);
		
		int numlow = column % 16;
		int numhigh = column / 16;
     6a4:	ce 01       	movw	r24, r28
     6a6:	dd 23       	and	r29, r29
     6a8:	0c f4       	brge	.+2      	; 0x6ac <oled_goto_column+0x3e>
     6aa:	0f 96       	adiw	r24, 0x0f	; 15
     6ac:	95 95       	asr	r25
     6ae:	87 95       	ror	r24
     6b0:	95 95       	asr	r25
     6b2:	87 95       	ror	r24
     6b4:	95 95       	asr	r25
     6b6:	87 95       	ror	r24
     6b8:	95 95       	asr	r25
     6ba:	87 95       	ror	r24
		
		write_command(numlow);
		write_command(16 + numhigh);
     6bc:	80 5f       	subi	r24, 0xF0	; 240
		//fontsize = 8;
	//}
//}

void write_command(uint8_t command){
	ext_oled_cmd[0] = command;
     6be:	e0 91 10 01 	lds	r30, 0x0110
     6c2:	f0 91 11 01 	lds	r31, 0x0111
     6c6:	80 83       	st	Z, r24
		int numlow = column % 16;
		int numhigh = column / 16;
		
		write_command(numlow);
		write_command(16 + numhigh);
		oled_set_adressing_mode(horizontal_mode);
     6c8:	80 e0       	ldi	r24, 0x00	; 0
     6ca:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <oled_set_adressing_mode>
	}
	
}
     6ce:	df 91       	pop	r29
     6d0:	cf 91       	pop	r28
     6d2:	08 95       	ret

000006d4 <oled_align_centre>:
	}
	return 0;
}

void oled_align_centre(char* title) {
	oled_goto_column(64- fontsize*strlen(title)/2);
     6d4:	fc 01       	movw	r30, r24
     6d6:	01 90       	ld	r0, Z+
     6d8:	00 20       	and	r0, r0
     6da:	e9 f7       	brne	.-6      	; 0x6d6 <oled_align_centre+0x2>
     6dc:	31 97       	sbiw	r30, 0x01	; 1
     6de:	e8 1b       	sub	r30, r24
     6e0:	f9 0b       	sbc	r31, r25
     6e2:	80 91 0c 01 	lds	r24, 0x010C
     6e6:	90 91 0d 01 	lds	r25, 0x010D
     6ea:	e8 9f       	mul	r30, r24
     6ec:	90 01       	movw	r18, r0
     6ee:	e9 9f       	mul	r30, r25
     6f0:	30 0d       	add	r19, r0
     6f2:	f8 9f       	mul	r31, r24
     6f4:	30 0d       	add	r19, r0
     6f6:	11 24       	eor	r1, r1
     6f8:	36 95       	lsr	r19
     6fa:	27 95       	ror	r18
     6fc:	80 e4       	ldi	r24, 0x40	; 64
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	82 1b       	sub	r24, r18
     702:	93 0b       	sbc	r25, r19
     704:	0e 94 37 03 	call	0x66e	; 0x66e <oled_goto_column>
     708:	08 95       	ret

0000070a <oled_pos>:
		write_data(~0b00000000);
	}
	oled_goto_line(line);
}

void oled_pos(int row, int column){
     70a:	cf 93       	push	r28
     70c:	df 93       	push	r29
     70e:	eb 01       	movw	r28, r22
	oled_goto_line(row);
     710:	0e 94 1e 03 	call	0x63c	; 0x63c <oled_goto_line>
	oled_goto_column(column);
     714:	ce 01       	movw	r24, r28
     716:	0e 94 37 03 	call	0x66e	; 0x66e <oled_goto_column>
}
     71a:	df 91       	pop	r29
     71c:	cf 91       	pop	r28
     71e:	08 95       	ret

00000720 <oled_home>:
	}
	oled_home();
}

void oled_home(){
	oled_pos(0,0);
     720:	60 e0       	ldi	r22, 0x00	; 0
     722:	70 e0       	ldi	r23, 0x00	; 0
     724:	80 e0       	ldi	r24, 0x00	; 0
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	0e 94 85 03 	call	0x70a	; 0x70a <oled_pos>
     72c:	08 95       	ret

0000072e <oled_clear_line>:
	else {
		oled_goto_column(letterplace*fontsize-1);
	}
}

void oled_clear_line(int line){
     72e:	cf 93       	push	r28
     730:	df 93       	push	r29
     732:	ec 01       	movw	r28, r24
	oled_pos(line, 0);
     734:	60 e0       	ldi	r22, 0x00	; 0
     736:	70 e0       	ldi	r23, 0x00	; 0
     738:	0e 94 85 03 	call	0x70a	; 0x70a <oled_pos>
     73c:	20 e8       	ldi	r18, 0x80	; 128
     73e:	30 e0       	ldi	r19, 0x00	; 0
void write_command(uint8_t command){
	ext_oled_cmd[0] = command;
}

void write_data(uint8_t data){
	ext_oled_data[0] = data;
     740:	e0 91 0e 01 	lds	r30, 0x010E
     744:	f0 91 0f 01 	lds	r31, 0x010F
     748:	10 82       	st	Z, r1
     74a:	21 50       	subi	r18, 0x01	; 1
     74c:	31 09       	sbc	r19, r1
}

void oled_clear_line(int line){
	oled_pos(line, 0);
	
	for (int col = 0; col < 128; col++) {
     74e:	21 15       	cp	r18, r1
     750:	31 05       	cpc	r19, r1
     752:	b1 f7       	brne	.-20     	; 0x740 <oled_clear_line+0x12>
		write_data(0b00000000);
	}
	oled_goto_line(line);
     754:	ce 01       	movw	r24, r28
     756:	0e 94 1e 03 	call	0x63c	; 0x63c <oled_goto_line>
}
     75a:	df 91       	pop	r29
     75c:	cf 91       	pop	r28
     75e:	08 95       	ret

00000760 <oled_reset>:
	//write_command(0xa5);
oled_reset();
	
}

void oled_reset(){
     760:	cf 93       	push	r28
     762:	df 93       	push	r29
	
	for (int line = 0; line < 8; line++) {
     764:	c0 e0       	ldi	r28, 0x00	; 0
     766:	d0 e0       	ldi	r29, 0x00	; 0
		oled_clear_line(line);
     768:	ce 01       	movw	r24, r28
     76a:	0e 94 97 03 	call	0x72e	; 0x72e <oled_clear_line>
	
}

void oled_reset(){
	
	for (int line = 0; line < 8; line++) {
     76e:	21 96       	adiw	r28, 0x01	; 1
     770:	c8 30       	cpi	r28, 0x08	; 8
     772:	d1 05       	cpc	r29, r1
     774:	c9 f7       	brne	.-14     	; 0x768 <oled_reset+0x8>
		oled_clear_line(line);
	}
	oled_home();
     776:	0e 94 90 03 	call	0x720	; 0x720 <oled_home>
}
     77a:	df 91       	pop	r29
     77c:	cf 91       	pop	r28
     77e:	08 95       	ret

00000780 <oled_init>:
		//fontsize = 8;
	//}
//}

void write_command(uint8_t command){
	ext_oled_cmd[0] = command;
     780:	e0 91 10 01 	lds	r30, 0x0110
     784:	f0 91 11 01 	lds	r31, 0x0111
     788:	8e ea       	ldi	r24, 0xAE	; 174
     78a:	80 83       	st	Z, r24
     78c:	e0 91 10 01 	lds	r30, 0x0110
     790:	f0 91 11 01 	lds	r31, 0x0111
     794:	81 ea       	ldi	r24, 0xA1	; 161
     796:	80 83       	st	Z, r24
     798:	e0 91 10 01 	lds	r30, 0x0110
     79c:	f0 91 11 01 	lds	r31, 0x0111
     7a0:	8a ed       	ldi	r24, 0xDA	; 218
     7a2:	80 83       	st	Z, r24
     7a4:	e0 91 10 01 	lds	r30, 0x0110
     7a8:	f0 91 11 01 	lds	r31, 0x0111
     7ac:	82 e1       	ldi	r24, 0x12	; 18
     7ae:	80 83       	st	Z, r24
     7b0:	e0 91 10 01 	lds	r30, 0x0110
     7b4:	f0 91 11 01 	lds	r31, 0x0111
     7b8:	88 ec       	ldi	r24, 0xC8	; 200
     7ba:	80 83       	st	Z, r24
     7bc:	e0 91 10 01 	lds	r30, 0x0110
     7c0:	f0 91 11 01 	lds	r31, 0x0111
     7c4:	88 ea       	ldi	r24, 0xA8	; 168
     7c6:	80 83       	st	Z, r24
     7c8:	e0 91 10 01 	lds	r30, 0x0110
     7cc:	f0 91 11 01 	lds	r31, 0x0111
     7d0:	8f e3       	ldi	r24, 0x3F	; 63
     7d2:	80 83       	st	Z, r24
     7d4:	e0 91 10 01 	lds	r30, 0x0110
     7d8:	f0 91 11 01 	lds	r31, 0x0111
     7dc:	85 ed       	ldi	r24, 0xD5	; 213
     7de:	80 83       	st	Z, r24
     7e0:	e0 91 10 01 	lds	r30, 0x0110
     7e4:	f0 91 11 01 	lds	r31, 0x0111
     7e8:	80 e8       	ldi	r24, 0x80	; 128
     7ea:	80 83       	st	Z, r24
     7ec:	e0 91 10 01 	lds	r30, 0x0110
     7f0:	f0 91 11 01 	lds	r31, 0x0111
     7f4:	81 e8       	ldi	r24, 0x81	; 129
     7f6:	80 83       	st	Z, r24
     7f8:	e0 91 10 01 	lds	r30, 0x0110
     7fc:	f0 91 11 01 	lds	r31, 0x0111
     800:	80 e5       	ldi	r24, 0x50	; 80
     802:	80 83       	st	Z, r24
     804:	e0 91 10 01 	lds	r30, 0x0110
     808:	f0 91 11 01 	lds	r31, 0x0111
     80c:	89 ed       	ldi	r24, 0xD9	; 217
     80e:	80 83       	st	Z, r24
     810:	e0 91 10 01 	lds	r30, 0x0110
     814:	f0 91 11 01 	lds	r31, 0x0111
     818:	81 e2       	ldi	r24, 0x21	; 33
     81a:	80 83       	st	Z, r24
     81c:	e0 91 10 01 	lds	r30, 0x0110
     820:	f0 91 11 01 	lds	r31, 0x0111
     824:	80 e2       	ldi	r24, 0x20	; 32
     826:	80 83       	st	Z, r24
     828:	e0 91 10 01 	lds	r30, 0x0110
     82c:	f0 91 11 01 	lds	r31, 0x0111
     830:	82 e0       	ldi	r24, 0x02	; 2
     832:	80 83       	st	Z, r24
     834:	e0 91 10 01 	lds	r30, 0x0110
     838:	f0 91 11 01 	lds	r31, 0x0111
     83c:	8b ed       	ldi	r24, 0xDB	; 219
     83e:	80 83       	st	Z, r24
     840:	e0 91 10 01 	lds	r30, 0x0110
     844:	f0 91 11 01 	lds	r31, 0x0111
     848:	80 e3       	ldi	r24, 0x30	; 48
     84a:	80 83       	st	Z, r24
     84c:	e0 91 10 01 	lds	r30, 0x0110
     850:	f0 91 11 01 	lds	r31, 0x0111
     854:	8d ea       	ldi	r24, 0xAD	; 173
     856:	80 83       	st	Z, r24
     858:	e0 91 10 01 	lds	r30, 0x0110
     85c:	f0 91 11 01 	lds	r31, 0x0111
     860:	10 82       	st	Z, r1
     862:	e0 91 10 01 	lds	r30, 0x0110
     866:	f0 91 11 01 	lds	r31, 0x0111
     86a:	84 ea       	ldi	r24, 0xA4	; 164
     86c:	80 83       	st	Z, r24
     86e:	e0 91 10 01 	lds	r30, 0x0110
     872:	f0 91 11 01 	lds	r31, 0x0111
     876:	86 ea       	ldi	r24, 0xA6	; 166
     878:	80 83       	st	Z, r24
     87a:	e0 91 10 01 	lds	r30, 0x0110
     87e:	f0 91 11 01 	lds	r31, 0x0111
     882:	8f ea       	ldi	r24, 0xAF	; 175
     884:	80 83       	st	Z, r24
	write_command(0x00);
	write_command(0xa4); //out follows RAM content
	write_command(0xa6); //set normal display
	write_command(0xaf); // display on
	//write_command(0xa5);
oled_reset();
     886:	0e 94 b0 03 	call	0x760	; 0x760 <oled_reset>
     88a:	08 95       	ret

0000088c <oled_fill_line>:
		write_data(0b00000000);
	}
	oled_goto_line(line);
}

void oled_fill_line(int line){
     88c:	cf 93       	push	r28
     88e:	df 93       	push	r29
     890:	ec 01       	movw	r28, r24
	oled_pos(line,0);
     892:	60 e0       	ldi	r22, 0x00	; 0
     894:	70 e0       	ldi	r23, 0x00	; 0
     896:	0e 94 85 03 	call	0x70a	; 0x70a <oled_pos>
     89a:	20 e8       	ldi	r18, 0x80	; 128
     89c:	30 e0       	ldi	r19, 0x00	; 0
void write_command(uint8_t command){
	ext_oled_cmd[0] = command;
}

void write_data(uint8_t data){
	ext_oled_data[0] = data;
     89e:	8f ef       	ldi	r24, 0xFF	; 255
     8a0:	e0 91 0e 01 	lds	r30, 0x010E
     8a4:	f0 91 0f 01 	lds	r31, 0x010F
     8a8:	80 83       	st	Z, r24
     8aa:	21 50       	subi	r18, 0x01	; 1
     8ac:	31 09       	sbc	r19, r1
}

void oled_fill_line(int line){
	oled_pos(line,0);
	
	for (int col =0; col < 128; col++) {
     8ae:	21 15       	cp	r18, r1
     8b0:	31 05       	cpc	r19, r1
     8b2:	b1 f7       	brne	.-20     	; 0x8a0 <oled_fill_line+0x14>
		write_data(~0b00000000);
	}
	oled_goto_line(line);
     8b4:	ce 01       	movw	r24, r28
     8b6:	0e 94 1e 03 	call	0x63c	; 0x63c <oled_goto_line>
}
     8ba:	df 91       	pop	r29
     8bc:	cf 91       	pop	r28
     8be:	08 95       	ret

000008c0 <__vector_17>:
uint8_t slide_right_V_min = 0;
uint8_t slide_right_V_max = 255;


// timer0 overflow
ISR(TIMER0_OVF_vect){
     8c0:	1f 92       	push	r1
     8c2:	0f 92       	push	r0
     8c4:	0f b6       	in	r0, 0x3f	; 63
     8c6:	0f 92       	push	r0
     8c8:	11 24       	eor	r1, r1
     8ca:	2f 93       	push	r18
     8cc:	3f 93       	push	r19
     8ce:	4f 93       	push	r20
     8d0:	5f 93       	push	r21
     8d2:	6f 93       	push	r22
     8d4:	7f 93       	push	r23
     8d6:	8f 93       	push	r24
     8d8:	9f 93       	push	r25
     8da:	af 93       	push	r26
     8dc:	bf 93       	push	r27
     8de:	cf 93       	push	r28
     8e0:	ef 93       	push	r30
     8e2:	ff 93       	push	r31
	channel_t channel;
	char data_char = get_ADC_data();
     8e4:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <get_ADC_data>
	int32_t data = (int32_t)data_char;
     8e8:	28 2f       	mov	r18, r24
     8ea:	30 e0       	ldi	r19, 0x00	; 0
     8ec:	40 e0       	ldi	r20, 0x00	; 0
     8ee:	50 e0       	ldi	r21, 0x00	; 0
	
	switch(contr_state){
     8f0:	90 91 b1 03 	lds	r25, 0x03B1
     8f4:	91 30       	cpi	r25, 0x01	; 1
     8f6:	71 f1       	breq	.+92     	; 0x954 <__vector_17+0x94>
     8f8:	38 f0       	brcs	.+14     	; 0x908 <__vector_17+0x48>
     8fa:	92 30       	cpi	r25, 0x02	; 2
     8fc:	09 f4       	brne	.+2      	; 0x900 <__vector_17+0x40>
     8fe:	50 c0       	rjmp	.+160    	; 0x9a0 <__vector_17+0xe0>
     900:	93 30       	cpi	r25, 0x03	; 3
     902:	09 f4       	brne	.+2      	; 0x906 <__vector_17+0x46>
     904:	69 c0       	rjmp	.+210    	; 0x9d8 <__vector_17+0x118>
     906:	82 c0       	rjmp	.+260    	; 0xa0c <__vector_17+0x14c>
		case(JOYSTICK_X):
		x_pos = ((data-x_offset)*200 )/ (joy_x_V_max - joy_x_V_min);
     908:	80 91 bc 03 	lds	r24, 0x03BC
     90c:	90 91 bd 03 	lds	r25, 0x03BD
     910:	aa 27       	eor	r26, r26
     912:	97 fd       	sbrc	r25, 7
     914:	a0 95       	com	r26
     916:	ba 2f       	mov	r27, r26
     918:	28 1b       	sub	r18, r24
     91a:	39 0b       	sbc	r19, r25
     91c:	4a 0b       	sbc	r20, r26
     91e:	5b 0b       	sbc	r21, r27
     920:	a8 ec       	ldi	r26, 0xC8	; 200
     922:	b0 e0       	ldi	r27, 0x00	; 0
     924:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <__muluhisi3>
     928:	20 91 31 01 	lds	r18, 0x0131
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 91 a5 03 	lds	r20, 0x03A5
     932:	24 1b       	sub	r18, r20
     934:	31 09       	sbc	r19, r1
     936:	44 27       	eor	r20, r20
     938:	37 fd       	sbrc	r19, 7
     93a:	40 95       	com	r20
     93c:	54 2f       	mov	r21, r20
     93e:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <__divmodsi4>
     942:	30 93 b3 03 	sts	0x03B3, r19
     946:	20 93 b2 03 	sts	0x03B2, r18
		contr_state = JOYSTICK_Y;
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	80 93 b1 03 	sts	0x03B1, r24
		channel = CHANNEL2;
     950:	c1 e0       	ldi	r28, 0x01	; 1
		break;
     952:	5c c0       	rjmp	.+184    	; 0xa0c <__vector_17+0x14c>
		case(JOYSTICK_Y):
		y_pos = ((data-y_offset)*200 )/ (joy_y_V_max - joy_y_V_min);
     954:	80 91 b8 03 	lds	r24, 0x03B8
     958:	90 91 b9 03 	lds	r25, 0x03B9
     95c:	aa 27       	eor	r26, r26
     95e:	97 fd       	sbrc	r25, 7
     960:	a0 95       	com	r26
     962:	ba 2f       	mov	r27, r26
     964:	28 1b       	sub	r18, r24
     966:	39 0b       	sbc	r19, r25
     968:	4a 0b       	sbc	r20, r26
     96a:	5b 0b       	sbc	r21, r27
     96c:	a8 ec       	ldi	r26, 0xC8	; 200
     96e:	b0 e0       	ldi	r27, 0x00	; 0
     970:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <__muluhisi3>
     974:	20 91 30 01 	lds	r18, 0x0130
     978:	30 e0       	ldi	r19, 0x00	; 0
     97a:	40 91 a4 03 	lds	r20, 0x03A4
     97e:	24 1b       	sub	r18, r20
     980:	31 09       	sbc	r19, r1
     982:	44 27       	eor	r20, r20
     984:	37 fd       	sbrc	r19, 7
     986:	40 95       	com	r20
     988:	54 2f       	mov	r21, r20
     98a:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <__divmodsi4>
     98e:	30 93 bb 03 	sts	0x03BB, r19
     992:	20 93 ba 03 	sts	0x03BA, r18
		contr_state = LEFT_SLIDER;
     996:	82 e0       	ldi	r24, 0x02	; 2
     998:	80 93 b1 03 	sts	0x03B1, r24
		channel = CHANNEL3;
     99c:	c2 e0       	ldi	r28, 0x02	; 2
		break;
     99e:	36 c0       	rjmp	.+108    	; 0xa0c <__vector_17+0x14c>
		case(LEFT_SLIDER):
		sliders.left = (data * 200)/ (slide_left_V_max - slide_left_V_min)  - 100;
     9a0:	a8 ec       	ldi	r26, 0xC8	; 200
     9a2:	b0 e0       	ldi	r27, 0x00	; 0
     9a4:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <__muluhisi3>
     9a8:	20 91 2f 01 	lds	r18, 0x012F
     9ac:	30 e0       	ldi	r19, 0x00	; 0
     9ae:	40 91 a3 03 	lds	r20, 0x03A3
     9b2:	24 1b       	sub	r18, r20
     9b4:	31 09       	sbc	r19, r1
     9b6:	44 27       	eor	r20, r20
     9b8:	37 fd       	sbrc	r19, 7
     9ba:	40 95       	com	r20
     9bc:	54 2f       	mov	r21, r20
     9be:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <__divmodsi4>
     9c2:	24 56       	subi	r18, 0x64	; 100
     9c4:	31 09       	sbc	r19, r1
     9c6:	30 93 b5 03 	sts	0x03B5, r19
     9ca:	20 93 b4 03 	sts	0x03B4, r18
		contr_state = RIGHT_SLIDER;
     9ce:	83 e0       	ldi	r24, 0x03	; 3
     9d0:	80 93 b1 03 	sts	0x03B1, r24
		channel = CHANNEL4;
     9d4:	c3 e0       	ldi	r28, 0x03	; 3
		break;
     9d6:	1a c0       	rjmp	.+52     	; 0xa0c <__vector_17+0x14c>
		case(RIGHT_SLIDER):
		sliders.right = (data * 200) / (slide_right_V_max - slide_right_V_min) - 100;
     9d8:	a8 ec       	ldi	r26, 0xC8	; 200
     9da:	b0 e0       	ldi	r27, 0x00	; 0
     9dc:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <__muluhisi3>
     9e0:	20 91 2e 01 	lds	r18, 0x012E
     9e4:	30 e0       	ldi	r19, 0x00	; 0
     9e6:	40 91 a2 03 	lds	r20, 0x03A2
     9ea:	24 1b       	sub	r18, r20
     9ec:	31 09       	sbc	r19, r1
     9ee:	44 27       	eor	r20, r20
     9f0:	37 fd       	sbrc	r19, 7
     9f2:	40 95       	com	r20
     9f4:	54 2f       	mov	r21, r20
     9f6:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <__divmodsi4>
     9fa:	24 56       	subi	r18, 0x64	; 100
     9fc:	31 09       	sbc	r19, r1
     9fe:	30 93 b7 03 	sts	0x03B7, r19
     a02:	20 93 b6 03 	sts	0x03B6, r18
		contr_state = JOYSTICK_X;
     a06:	10 92 b1 03 	sts	0x03B1, r1
		channel = CHANNEL1;
     a0a:	c0 e0       	ldi	r28, 0x00	; 0
		break;
	}
	ADC_start_read(channel);
     a0c:	8c 2f       	mov	r24, r28
     a0e:	0e 94 ee 01 	call	0x3dc	; 0x3dc <ADC_start_read>
}
     a12:	ff 91       	pop	r31
     a14:	ef 91       	pop	r30
     a16:	cf 91       	pop	r28
     a18:	bf 91       	pop	r27
     a1a:	af 91       	pop	r26
     a1c:	9f 91       	pop	r25
     a1e:	8f 91       	pop	r24
     a20:	7f 91       	pop	r23
     a22:	6f 91       	pop	r22
     a24:	5f 91       	pop	r21
     a26:	4f 91       	pop	r20
     a28:	3f 91       	pop	r19
     a2a:	2f 91       	pop	r18
     a2c:	0f 90       	pop	r0
     a2e:	0f be       	out	0x3f, r0	; 63
     a30:	0f 90       	pop	r0
     a32:	1f 90       	pop	r1
     a34:	18 95       	reti

00000a36 <joystick_auto_calibrate>:

void joystick_auto_calibrate(){
	
	ADC_start_read(CHANNEL1);
     a36:	80 e0       	ldi	r24, 0x00	; 0
     a38:	0e 94 ee 01 	call	0x3dc	; 0x3dc <ADC_start_read>
     a3c:	89 ef       	ldi	r24, 0xF9	; 249
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	01 97       	sbiw	r24, 0x01	; 1
     a42:	f1 f7       	brne	.-4      	; 0xa40 <joystick_auto_calibrate+0xa>
     a44:	00 c0       	rjmp	.+0      	; 0xa46 <joystick_auto_calibrate+0x10>
     a46:	00 00       	nop
	_delay_ms(1);
	x_offset = (int)get_ADC_data();
     a48:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <get_ADC_data>
     a4c:	90 93 bd 03 	sts	0x03BD, r25
     a50:	80 93 bc 03 	sts	0x03BC, r24
	
	ADC_start_read(CHANNEL2);
     a54:	81 e0       	ldi	r24, 0x01	; 1
     a56:	0e 94 ee 01 	call	0x3dc	; 0x3dc <ADC_start_read>
     a5a:	89 ef       	ldi	r24, 0xF9	; 249
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	01 97       	sbiw	r24, 0x01	; 1
     a60:	f1 f7       	brne	.-4      	; 0xa5e <joystick_auto_calibrate+0x28>
     a62:	00 c0       	rjmp	.+0      	; 0xa64 <joystick_auto_calibrate+0x2e>
     a64:	00 00       	nop
	_delay_ms(1);
	y_offset = (int)get_ADC_data();
     a66:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <get_ADC_data>
     a6a:	90 93 b9 03 	sts	0x03B9, r25
     a6e:	80 93 b8 03 	sts	0x03B8, r24
     a72:	08 95       	ret

00000a74 <joystick_init>:
	
}

void joystick_init(int prescaler){
     a74:	cf 93       	push	r28
     a76:	df 93       	push	r29
     a78:	ec 01       	movw	r28, r24
	
	// Button inputs:
	clear_bit(DDRB, PB0);	//Joystick button
     a7a:	b8 98       	cbi	0x17, 0	; 23
	set_bit(PORTB, PB0);	//Set pull-up resistor
     a7c:	c0 9a       	sbi	0x18, 0	; 24
	clear_bit(DDRB, PB2);	//Right button
     a7e:	ba 98       	cbi	0x17, 2	; 23
	clear_bit(DDRB, PB3);	//Left button
     a80:	bb 98       	cbi	0x17, 3	; 23
	
	
	joystick_auto_calibrate();
     a82:	0e 94 1b 05 	call	0xa36	; 0xa36 <joystick_auto_calibrate>
	
	contr_state = JOYSTICK_X;
     a86:	10 92 b1 03 	sts	0x03B1, r1
	ADC_start_read(CHANNEL1);
     a8a:	80 e0       	ldi	r24, 0x00	; 0
     a8c:	0e 94 ee 01 	call	0x3dc	; 0x3dc <ADC_start_read>
	
	//-------------INITIALIZE TIMER INPUT-----------------
	
	// Disable global interrupts
	cli();
     a90:	f8 94       	cli
	
	// enable timer overflow interrupt for Timer0
	TIMSK=(1<<TOIE0);
     a92:	82 e0       	ldi	r24, 0x02	; 2
     a94:	89 bf       	out	0x39, r24	; 57
	
	// start timer0 with /256 prescaler
	if (prescaler == 256){
     a96:	c1 15       	cp	r28, r1
     a98:	81 e0       	ldi	r24, 0x01	; 1
     a9a:	d8 07       	cpc	r29, r24
     a9c:	19 f4       	brne	.+6      	; 0xaa4 <joystick_init+0x30>
		TCCR0 = (1<<CS02);
     a9e:	84 e0       	ldi	r24, 0x04	; 4
     aa0:	83 bf       	out	0x33, r24	; 51
     aa2:	05 c0       	rjmp	.+10     	; 0xaae <joystick_init+0x3a>
	}
	else if (prescaler == 1024){
     aa4:	c1 15       	cp	r28, r1
     aa6:	d4 40       	sbci	r29, 0x04	; 4
     aa8:	11 f4       	brne	.+4      	; 0xaae <joystick_init+0x3a>
		TCCR0 = (1<<CS02) | (1<<CS00);
     aaa:	85 e0       	ldi	r24, 0x05	; 5
     aac:	83 bf       	out	0x33, r24	; 51
	}
	
	// Enable global interrupts
	sei();
     aae:	78 94       	sei
	
	//---------------------------------------------------

}
     ab0:	df 91       	pop	r29
     ab2:	cf 91       	pop	r28
     ab4:	08 95       	ret

00000ab6 <joystick_button>:
	return;
}

int joystick_button(usb_button_t button){
	
	switch (button) {
     ab6:	81 30       	cpi	r24, 0x01	; 1
     ab8:	59 f0       	breq	.+22     	; 0xad0 <joystick_button+0x1a>
     aba:	18 f0       	brcs	.+6      	; 0xac2 <joystick_button+0xc>
     abc:	82 30       	cpi	r24, 0x02	; 2
     abe:	61 f0       	breq	.+24     	; 0xad8 <joystick_button+0x22>
     ac0:	0f c0       	rjmp	.+30     	; 0xae0 <joystick_button+0x2a>
		case JOYSTICKBUTTON :
		return !test_bit(PINB, PINB0);
     ac2:	96 b3       	in	r25, 0x16	; 22
     ac4:	81 e0       	ldi	r24, 0x01	; 1
     ac6:	89 27       	eor	r24, r25
     ac8:	28 2f       	mov	r18, r24
     aca:	21 70       	andi	r18, 0x01	; 1
     acc:	30 e0       	ldi	r19, 0x00	; 0
     ace:	12 c0       	rjmp	.+36     	; 0xaf4 <joystick_button+0x3e>
		case LBUTTON :
		return test_bit(PINB, PINB3);
     ad0:	26 b3       	in	r18, 0x16	; 22
     ad2:	28 70       	andi	r18, 0x08	; 8
     ad4:	30 e0       	ldi	r19, 0x00	; 0
     ad6:	0e c0       	rjmp	.+28     	; 0xaf4 <joystick_button+0x3e>
		case RBUTTON :
		return test_bit(PINB, PINB2);
     ad8:	26 b3       	in	r18, 0x16	; 22
     ada:	24 70       	andi	r18, 0x04	; 4
     adc:	30 e0       	ldi	r19, 0x00	; 0
     ade:	0a c0       	rjmp	.+20     	; 0xaf4 <joystick_button+0x3e>
		default:
		printf("Not valid button");
     ae0:	80 e6       	ldi	r24, 0x60	; 96
     ae2:	91 e0       	ldi	r25, 0x01	; 1
     ae4:	9f 93       	push	r25
     ae6:	8f 93       	push	r24
     ae8:	0e 94 8e 0b 	call	0x171c	; 0x171c <printf>
		return EXIT_FAILURE;
     aec:	0f 90       	pop	r0
     aee:	0f 90       	pop	r0
     af0:	21 e0       	ldi	r18, 0x01	; 1
     af2:	30 e0       	ldi	r19, 0x00	; 0
	}

}
     af4:	c9 01       	movw	r24, r18
     af6:	08 95       	ret

00000af8 <joystick_get_position>:


joystick_position_t joystick_get_position() {
	joystick_position_t return_pos;
	return_pos.x = x_pos;
     af8:	40 91 b2 03 	lds	r20, 0x03B2
     afc:	50 91 b3 03 	lds	r21, 0x03B3
	return_pos.y = y_pos;
     b00:	20 91 ba 03 	lds	r18, 0x03BA
     b04:	30 91 bb 03 	lds	r19, 0x03BB
	return return_pos ;
     b08:	ba 01       	movw	r22, r20
     b0a:	c9 01       	movw	r24, r18
}
     b0c:	08 95       	ret

00000b0e <joystick_get_direction>:


joystick_direction_t joystick_get_direction() {
	
	joystick_position_t current_pos = joystick_get_position();
     b0e:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <joystick_get_position>
	
	int x = x_pos;
     b12:	20 91 b2 03 	lds	r18, 0x03B2
     b16:	30 91 b3 03 	lds	r19, 0x03B3
	int y = y_pos;
     b1a:	80 91 ba 03 	lds	r24, 0x03BA
     b1e:	90 91 bb 03 	lds	r25, 0x03BB

	if (abs(x) >= abs(y)){
     b22:	b9 01       	movw	r22, r18
     b24:	33 23       	and	r19, r19
     b26:	24 f4       	brge	.+8      	; 0xb30 <joystick_get_direction+0x22>
     b28:	66 27       	eor	r22, r22
     b2a:	77 27       	eor	r23, r23
     b2c:	62 1b       	sub	r22, r18
     b2e:	73 0b       	sbc	r23, r19
     b30:	ac 01       	movw	r20, r24
     b32:	99 23       	and	r25, r25
     b34:	24 f4       	brge	.+8      	; 0xb3e <joystick_get_direction+0x30>
     b36:	44 27       	eor	r20, r20
     b38:	55 27       	eor	r21, r21
     b3a:	48 1b       	sub	r20, r24
     b3c:	59 0b       	sbc	r21, r25
     b3e:	64 17       	cp	r22, r20
     b40:	75 07       	cpc	r23, r21
     b42:	4c f0       	brlt	.+18     	; 0xb56 <joystick_get_direction+0x48>
		if (abs(x) < 10){
     b44:	c9 01       	movw	r24, r18
     b46:	09 96       	adiw	r24, 0x09	; 9
     b48:	43 97       	sbiw	r24, 0x13	; 19
     b4a:	90 f0       	brcs	.+36     	; 0xb70 <joystick_get_direction+0x62>
			return NEUTRAL;
		}
		else if (x < 0){
     b4c:	83 2f       	mov	r24, r19
     b4e:	88 1f       	adc	r24, r24
     b50:	88 27       	eor	r24, r24
     b52:	88 1f       	adc	r24, r24
     b54:	08 95       	ret
		else {
			return RIGHT;
		}
	}
	else{
		if (abs(y) < 65){
     b56:	9c 01       	movw	r18, r24
     b58:	20 5c       	subi	r18, 0xC0	; 192
     b5a:	3f 4f       	sbci	r19, 0xFF	; 255
     b5c:	21 38       	cpi	r18, 0x81	; 129
     b5e:	31 05       	cpc	r19, r1
     b60:	48 f0       	brcs	.+18     	; 0xb74 <joystick_get_direction+0x66>
			return NEUTRAL;
		}
		else if (y < 0){
			return DOWN;
     b62:	90 95       	com	r25
     b64:	99 1f       	adc	r25, r25
     b66:	99 27       	eor	r25, r25
     b68:	99 1f       	adc	r25, r25
     b6a:	83 e0       	ldi	r24, 0x03	; 3
     b6c:	89 1b       	sub	r24, r25
     b6e:	08 95       	ret
	int x = x_pos;
	int y = y_pos;

	if (abs(x) >= abs(y)){
		if (abs(x) < 10){
			return NEUTRAL;
     b70:	84 e0       	ldi	r24, 0x04	; 4
     b72:	08 95       	ret
			return RIGHT;
		}
	}
	else{
		if (abs(y) < 65){
			return NEUTRAL;
     b74:	84 e0       	ldi	r24, 0x04	; 4
		}
		else {
			return UP;
		}
	}
}
     b76:	08 95       	ret

00000b78 <new_menu>:

int cutter = 0;
int title_cutter = 0;
int display_line_offset = 0;

menu_t* new_menu(char* name, menu_t* parent) {
     b78:	0f 93       	push	r16
     b7a:	1f 93       	push	r17
     b7c:	cf 93       	push	r28
     b7e:	df 93       	push	r29
     b80:	8c 01       	movw	r16, r24
     b82:	eb 01       	movw	r28, r22
	menu_t* menu = malloc(sizeof(menu_t));
     b84:	88 e0       	ldi	r24, 0x08	; 8
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	0e 94 b6 09 	call	0x136c	; 0x136c <malloc>
     b8c:	fc 01       	movw	r30, r24
	menu->title = name;
     b8e:	11 83       	std	Z+1, r17	; 0x01
     b90:	00 83       	st	Z, r16
	menu->parent = parent;
     b92:	d3 83       	std	Z+3, r29	; 0x03
     b94:	c2 83       	std	Z+2, r28	; 0x02
	menu->right_sibling = NULL;
     b96:	17 82       	std	Z+7, r1	; 0x07
     b98:	16 82       	std	Z+6, r1	; 0x06
	menu->first_child = NULL;
     b9a:	15 82       	std	Z+5, r1	; 0x05
     b9c:	14 82       	std	Z+4, r1	; 0x04
	return menu;
}
     b9e:	df 91       	pop	r29
     ba0:	cf 91       	pop	r28
     ba2:	1f 91       	pop	r17
     ba4:	0f 91       	pop	r16
     ba6:	08 95       	ret

00000ba8 <size_of_menu>:

int size_of_menu(menu_t* menu) {
	
	int menu_size = 0;
	
	menu = menu->first_child;
     ba8:	dc 01       	movw	r26, r24
     baa:	14 96       	adiw	r26, 0x04	; 4
     bac:	ed 91       	ld	r30, X+
     bae:	fc 91       	ld	r31, X
     bb0:	15 97       	sbiw	r26, 0x05	; 5
	if (menu == NULL) {
     bb2:	30 97       	sbiw	r30, 0x00	; 0
     bb4:	79 f0       	breq	.+30     	; 0xbd4 <size_of_menu+0x2c>
		return menu_size;
	}
	menu_size ++;											
	while (menu->right_sibling != NULL) {
     bb6:	06 80       	ldd	r0, Z+6	; 0x06
     bb8:	f7 81       	ldd	r31, Z+7	; 0x07
     bba:	e0 2d       	mov	r30, r0
     bbc:	30 97       	sbiw	r30, 0x00	; 0
     bbe:	69 f0       	breq	.+26     	; 0xbda <size_of_menu+0x32>
     bc0:	21 e0       	ldi	r18, 0x01	; 1
     bc2:	30 e0       	ldi	r19, 0x00	; 0
		menu = menu->right_sibling;		
		menu_size++;
     bc4:	2f 5f       	subi	r18, 0xFF	; 255
     bc6:	3f 4f       	sbci	r19, 0xFF	; 255
	menu = menu->first_child;
	if (menu == NULL) {
		return menu_size;
	}
	menu_size ++;											
	while (menu->right_sibling != NULL) {
     bc8:	06 80       	ldd	r0, Z+6	; 0x06
     bca:	f7 81       	ldd	r31, Z+7	; 0x07
     bcc:	e0 2d       	mov	r30, r0
     bce:	30 97       	sbiw	r30, 0x00	; 0
     bd0:	c9 f7       	brne	.-14     	; 0xbc4 <size_of_menu+0x1c>
     bd2:	06 c0       	rjmp	.+12     	; 0xbe0 <size_of_menu+0x38>
	
	int menu_size = 0;
	
	menu = menu->first_child;
	if (menu == NULL) {
		return menu_size;
     bd4:	80 e0       	ldi	r24, 0x00	; 0
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	08 95       	ret
	}
	menu_size ++;											
	while (menu->right_sibling != NULL) {
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	08 95       	ret
		menu = menu->right_sibling;		
		menu_size++;
     be0:	82 2f       	mov	r24, r18
     be2:	93 2f       	mov	r25, r19
	}
	return menu_size;	
}
     be4:	08 95       	ret

00000be6 <printTitle>:
	else{
		printf("OK");
	}
}

void printTitle(char* title){
     be6:	cf 93       	push	r28
     be8:	df 93       	push	r29
     bea:	ec 01       	movw	r28, r24
	oled_align_centre(title);
     bec:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <oled_align_centre>
	int i = 0;
	while(title[i])
     bf0:	88 81       	ld	r24, Y
     bf2:	88 23       	and	r24, r24
     bf4:	49 f0       	breq	.+18     	; 0xc08 <printTitle+0x22>
     bf6:	21 96       	adiw	r28, 0x01	; 1
	{
		unsigned char c = toupper(title[i]);
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	0e 94 3b 0b 	call	0x1676	; 0x1676 <toupper>
		
		oled_put_char(c);
     bfe:	0e 94 49 02 	call	0x492	; 0x492 <oled_put_char>
}

void printTitle(char* title){
	oled_align_centre(title);
	int i = 0;
	while(title[i])
     c02:	89 91       	ld	r24, Y+
     c04:	81 11       	cpse	r24, r1
     c06:	f8 cf       	rjmp	.-16     	; 0xbf8 <printTitle+0x12>
	}
	//oled_pos(1,0);
	//for (int i = 0; i < 16; i++) {
		//oled_printf("-");
	//}
	oled_pos(2,0);
     c08:	60 e0       	ldi	r22, 0x00	; 0
     c0a:	70 e0       	ldi	r23, 0x00	; 0
     c0c:	82 e0       	ldi	r24, 0x02	; 2
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	0e 94 85 03 	call	0x70a	; 0x70a <oled_pos>
}
     c14:	df 91       	pop	r29
     c16:	cf 91       	pop	r28
     c18:	08 95       	ret

00000c1a <oled_menu_print>:

void oled_menu_print(menu_t *menu) {
     c1a:	ef 92       	push	r14
     c1c:	ff 92       	push	r15
     c1e:	0f 93       	push	r16
     c20:	1f 93       	push	r17
     c22:	cf 93       	push	r28
     c24:	df 93       	push	r29
     c26:	ec 01       	movw	r28, r24
	
	if (cutter < -1){
     c28:	80 91 aa 03 	lds	r24, 0x03AA
     c2c:	90 91 ab 03 	lds	r25, 0x03AB
     c30:	8f 3f       	cpi	r24, 0xFF	; 255
     c32:	2f ef       	ldi	r18, 0xFF	; 255
     c34:	92 07       	cpc	r25, r18
     c36:	34 f4       	brge	.+12     	; 0xc44 <oled_menu_print+0x2a>
		cutter ++;
     c38:	01 96       	adiw	r24, 0x01	; 1
     c3a:	90 93 ab 03 	sts	0x03AB, r25
     c3e:	80 93 aa 03 	sts	0x03AA, r24
		return;
     c42:	dd c0       	rjmp	.+442    	; 0xdfe <oled_menu_print+0x1e4>
	}
	if (title_cutter < -1){
     c44:	80 91 a8 03 	lds	r24, 0x03A8
     c48:	90 91 a9 03 	lds	r25, 0x03A9
     c4c:	8f 3f       	cpi	r24, 0xFF	; 255
     c4e:	2f ef       	ldi	r18, 0xFF	; 255
     c50:	92 07       	cpc	r25, r18
     c52:	34 f4       	brge	.+12     	; 0xc60 <oled_menu_print+0x46>
		title_cutter ++;
     c54:	01 96       	adiw	r24, 0x01	; 1
     c56:	90 93 a9 03 	sts	0x03A9, r25
     c5a:	80 93 a8 03 	sts	0x03A8, r24
		return;
     c5e:	cf c0       	rjmp	.+414    	; 0xdfe <oled_menu_print+0x1e4>
	}
	
	oled_reset();
     c60:	0e 94 b0 03 	call	0x760	; 0x760 <oled_reset>
	
	if (title_cutter == -1){
     c64:	80 91 a8 03 	lds	r24, 0x03A8
     c68:	90 91 a9 03 	lds	r25, 0x03A9
     c6c:	01 96       	adiw	r24, 0x01	; 1
     c6e:	21 f4       	brne	.+8      	; 0xc78 <oled_menu_print+0x5e>
		title_cutter ++;
     c70:	10 92 a9 03 	sts	0x03A9, r1
     c74:	10 92 a8 03 	sts	0x03A8, r1
	}
	
	if (long_string(menu->title + title_cutter)){
     c78:	28 81       	ld	r18, Y
     c7a:	39 81       	ldd	r19, Y+1	; 0x01
     c7c:	80 91 a8 03 	lds	r24, 0x03A8
     c80:	90 91 a9 03 	lds	r25, 0x03A9
     c84:	82 0f       	add	r24, r18
     c86:	93 1f       	adc	r25, r19
     c88:	0e 94 04 03 	call	0x608	; 0x608 <long_string>
     c8c:	89 2b       	or	r24, r25
     c8e:	81 f0       	breq	.+32     	; 0xcb0 <oled_menu_print+0x96>
		title_cutter ++;
     c90:	80 91 a8 03 	lds	r24, 0x03A8
     c94:	90 91 a9 03 	lds	r25, 0x03A9
     c98:	01 96       	adiw	r24, 0x01	; 1
     c9a:	90 93 a9 03 	sts	0x03A9, r25
     c9e:	80 93 a8 03 	sts	0x03A8, r24
		printTitle(menu->title + title_cutter);
     ca2:	28 81       	ld	r18, Y
     ca4:	39 81       	ldd	r19, Y+1	; 0x01
     ca6:	82 0f       	add	r24, r18
     ca8:	93 1f       	adc	r25, r19
     caa:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <printTitle>
     cae:	16 c0       	rjmp	.+44     	; 0xcdc <oled_menu_print+0xc2>
	}
	
	else if(title_cutter > 0){
     cb0:	80 91 a8 03 	lds	r24, 0x03A8
     cb4:	90 91 a9 03 	lds	r25, 0x03A9
     cb8:	18 16       	cp	r1, r24
     cba:	19 06       	cpc	r1, r25
     cbc:	5c f4       	brge	.+22     	; 0xcd4 <oled_menu_print+0xba>
		printTitle(menu->title);
     cbe:	88 81       	ld	r24, Y
     cc0:	99 81       	ldd	r25, Y+1	; 0x01
     cc2:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <printTitle>
		title_cutter = -5;
     cc6:	8b ef       	ldi	r24, 0xFB	; 251
     cc8:	9f ef       	ldi	r25, 0xFF	; 255
     cca:	90 93 a9 03 	sts	0x03A9, r25
     cce:	80 93 a8 03 	sts	0x03A8, r24
     cd2:	04 c0       	rjmp	.+8      	; 0xcdc <oled_menu_print+0xc2>
		
	}
	else{
		printTitle(menu->title);
     cd4:	88 81       	ld	r24, Y
     cd6:	99 81       	ldd	r25, Y+1	; 0x01
     cd8:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <printTitle>
	}
	
	int line = 2;
	
	menu = menu->first_child;
     cdc:	0c 80       	ldd	r0, Y+4	; 0x04
     cde:	dd 81       	ldd	r29, Y+5	; 0x05
     ce0:	c0 2d       	mov	r28, r0
	
	for (int i = 0; i < display_line_offset; i++){
     ce2:	20 91 a6 03 	lds	r18, 0x03A6
     ce6:	30 91 a7 03 	lds	r19, 0x03A7
     cea:	12 16       	cp	r1, r18
     cec:	13 06       	cpc	r1, r19
     cee:	0c f0       	brlt	.+2      	; 0xcf2 <oled_menu_print+0xd8>
     cf0:	7b c0       	rjmp	.+246    	; 0xde8 <oled_menu_print+0x1ce>
     cf2:	80 e0       	ldi	r24, 0x00	; 0
     cf4:	90 e0       	ldi	r25, 0x00	; 0
		menu = menu->right_sibling;
     cf6:	0e 80       	ldd	r0, Y+6	; 0x06
     cf8:	df 81       	ldd	r29, Y+7	; 0x07
     cfa:	c0 2d       	mov	r28, r0
	
	int line = 2;
	
	menu = menu->first_child;
	
	for (int i = 0; i < display_line_offset; i++){
     cfc:	01 96       	adiw	r24, 0x01	; 1
     cfe:	82 17       	cp	r24, r18
     d00:	93 07       	cpc	r25, r19
     d02:	c9 f7       	brne	.-14     	; 0xcf6 <oled_menu_print+0xdc>
     d04:	71 c0       	rjmp	.+226    	; 0xde8 <oled_menu_print+0x1ce>
	}
	
	
	while (menu != NULL && line < 7) {
		
		oled_pos(line,0);
     d06:	60 e0       	ldi	r22, 0x00	; 0
     d08:	70 e0       	ldi	r23, 0x00	; 0
     d0a:	c8 01       	movw	r24, r16
     d0c:	0e 94 85 03 	call	0x70a	; 0x70a <oled_pos>
		
		if (current_line == line + display_line_offset) {
     d10:	80 91 32 01 	lds	r24, 0x0132
     d14:	90 91 33 01 	lds	r25, 0x0133
     d18:	20 91 a6 03 	lds	r18, 0x03A6
     d1c:	30 91 a7 03 	lds	r19, 0x03A7
     d20:	20 0f       	add	r18, r16
     d22:	31 1f       	adc	r19, r17
     d24:	28 17       	cp	r18, r24
     d26:	39 07       	cpc	r19, r25
     d28:	09 f0       	breq	.+2      	; 0xd2c <oled_menu_print+0x112>
     d2a:	4a c0       	rjmp	.+148    	; 0xdc0 <oled_menu_print+0x1a6>
			
			oled_fill_line(line);
     d2c:	c8 01       	movw	r24, r16
     d2e:	0e 94 46 04 	call	0x88c	; 0x88c <oled_fill_line>
			
			if (cutter == -1){
     d32:	80 91 aa 03 	lds	r24, 0x03AA
     d36:	90 91 ab 03 	lds	r25, 0x03AB
     d3a:	01 96       	adiw	r24, 0x01	; 1
     d3c:	21 f4       	brne	.+8      	; 0xd46 <oled_menu_print+0x12c>
				cutter ++;
     d3e:	10 92 ab 03 	sts	0x03AB, r1
     d42:	10 92 aa 03 	sts	0x03AA, r1
			}
			
			if (long_string(menu->title + cutter)){
     d46:	28 81       	ld	r18, Y
     d48:	39 81       	ldd	r19, Y+1	; 0x01
     d4a:	80 91 aa 03 	lds	r24, 0x03AA
     d4e:	90 91 ab 03 	lds	r25, 0x03AB
     d52:	82 0f       	add	r24, r18
     d54:	93 1f       	adc	r25, r19
     d56:	0e 94 04 03 	call	0x608	; 0x608 <long_string>
     d5a:	89 2b       	or	r24, r25
     d5c:	a1 f0       	breq	.+40     	; 0xd86 <oled_menu_print+0x16c>
				
				cutter ++;
     d5e:	80 91 aa 03 	lds	r24, 0x03AA
     d62:	90 91 ab 03 	lds	r25, 0x03AB
     d66:	01 96       	adiw	r24, 0x01	; 1
     d68:	90 93 ab 03 	sts	0x03AB, r25
     d6c:	80 93 aa 03 	sts	0x03AA, r24
				oled_inv_printf(menu->title + cutter);
     d70:	28 81       	ld	r18, Y
     d72:	39 81       	ldd	r19, Y+1	; 0x01
     d74:	82 0f       	add	r24, r18
     d76:	93 1f       	adc	r25, r19
     d78:	9f 93       	push	r25
     d7a:	8f 93       	push	r24
     d7c:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <oled_inv_printf>
     d80:	0f 90       	pop	r0
     d82:	0f 90       	pop	r0
     d84:	25 c0       	rjmp	.+74     	; 0xdd0 <oled_menu_print+0x1b6>
			}
			
			else if(cutter > 0){
     d86:	80 91 aa 03 	lds	r24, 0x03AA
     d8a:	90 91 ab 03 	lds	r25, 0x03AB
     d8e:	18 16       	cp	r1, r24
     d90:	19 06       	cpc	r1, r25
     d92:	6c f4       	brge	.+26     	; 0xdae <oled_menu_print+0x194>
				oled_inv_printf(menu->title);
     d94:	89 81       	ldd	r24, Y+1	; 0x01
     d96:	8f 93       	push	r24
     d98:	88 81       	ld	r24, Y
     d9a:	8f 93       	push	r24
     d9c:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <oled_inv_printf>
				cutter = -5;
     da0:	f0 92 ab 03 	sts	0x03AB, r15
     da4:	e0 92 aa 03 	sts	0x03AA, r14
     da8:	0f 90       	pop	r0
     daa:	0f 90       	pop	r0
     dac:	11 c0       	rjmp	.+34     	; 0xdd0 <oled_menu_print+0x1b6>
			}
			else{
				oled_inv_printf(menu->title);
     dae:	89 81       	ldd	r24, Y+1	; 0x01
     db0:	8f 93       	push	r24
     db2:	88 81       	ld	r24, Y
     db4:	8f 93       	push	r24
     db6:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <oled_inv_printf>
     dba:	0f 90       	pop	r0
     dbc:	0f 90       	pop	r0
     dbe:	08 c0       	rjmp	.+16     	; 0xdd0 <oled_menu_print+0x1b6>
			}
		}else {
			oled_printf(menu->title);
     dc0:	89 81       	ldd	r24, Y+1	; 0x01
     dc2:	8f 93       	push	r24
     dc4:	88 81       	ld	r24, Y
     dc6:	8f 93       	push	r24
     dc8:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <oled_printf>
     dcc:	0f 90       	pop	r0
     dce:	0f 90       	pop	r0
		}
		++line;
     dd0:	0f 5f       	subi	r16, 0xFF	; 255
     dd2:	1f 4f       	sbci	r17, 0xFF	; 255
		menu = menu->right_sibling;
     dd4:	0e 80       	ldd	r0, Y+6	; 0x06
     dd6:	df 81       	ldd	r29, Y+7	; 0x07
     dd8:	c0 2d       	mov	r28, r0
	for (int i = 0; i < display_line_offset; i++){
		menu = menu->right_sibling;
	}
	
	
	while (menu != NULL && line < 7) {
     dda:	20 97       	sbiw	r28, 0x00	; 0
     ddc:	81 f0       	breq	.+32     	; 0xdfe <oled_menu_print+0x1e4>
     dde:	07 30       	cpi	r16, 0x07	; 7
     de0:	11 05       	cpc	r17, r1
     de2:	09 f0       	breq	.+2      	; 0xde6 <oled_menu_print+0x1cc>
     de4:	90 cf       	rjmp	.-224    	; 0xd06 <oled_menu_print+0xec>
     de6:	0b c0       	rjmp	.+22     	; 0xdfe <oled_menu_print+0x1e4>
     de8:	20 97       	sbiw	r28, 0x00	; 0
     dea:	49 f0       	breq	.+18     	; 0xdfe <oled_menu_print+0x1e4>
     dec:	02 e0       	ldi	r16, 0x02	; 2
     dee:	10 e0       	ldi	r17, 0x00	; 0
				oled_inv_printf(menu->title + cutter);
			}
			
			else if(cutter > 0){
				oled_inv_printf(menu->title);
				cutter = -5;
     df0:	0f 2e       	mov	r0, r31
     df2:	fb ef       	ldi	r31, 0xFB	; 251
     df4:	ef 2e       	mov	r14, r31
     df6:	ff 24       	eor	r15, r15
     df8:	fa 94       	dec	r15
     dfa:	f0 2d       	mov	r31, r0
     dfc:	84 cf       	rjmp	.-248    	; 0xd06 <oled_menu_print+0xec>
		}
		++line;
		menu = menu->right_sibling;
	}
	
}
     dfe:	df 91       	pop	r29
     e00:	cf 91       	pop	r28
     e02:	1f 91       	pop	r17
     e04:	0f 91       	pop	r16
     e06:	ff 90       	pop	r15
     e08:	ef 90       	pop	r14
     e0a:	08 95       	ret

00000e0c <oled_menu_init>:

void set_first_child(menu_t* menu, menu_t* first_child) {
	menu->first_child = first_child;
}

menu_t *oled_menu_init(void) {
     e0c:	6f 92       	push	r6
     e0e:	7f 92       	push	r7
     e10:	8f 92       	push	r8
     e12:	9f 92       	push	r9
     e14:	af 92       	push	r10
     e16:	bf 92       	push	r11
     e18:	cf 92       	push	r12
     e1a:	df 92       	push	r13
     e1c:	ef 92       	push	r14
     e1e:	ff 92       	push	r15
     e20:	0f 93       	push	r16
     e22:	1f 93       	push	r17
     e24:	cf 93       	push	r28
     e26:	df 93       	push	r29
	menu_t* main_menu = new_menu("Main Menu", NULL);
     e28:	60 e0       	ldi	r22, 0x00	; 0
     e2a:	70 e0       	ldi	r23, 0x00	; 0
     e2c:	88 ec       	ldi	r24, 0xC8	; 200
     e2e:	91 e0       	ldi	r25, 0x01	; 1
     e30:	0e 94 bc 05 	call	0xb78	; 0xb78 <new_menu>
     e34:	3c 01       	movw	r6, r24
	menu_t* highscores = new_menu("Highscores", main_menu);
     e36:	bc 01       	movw	r22, r24
     e38:	82 ed       	ldi	r24, 0xD2	; 210
     e3a:	91 e0       	ldi	r25, 0x01	; 1
     e3c:	0e 94 bc 05 	call	0xb78	; 0xb78 <new_menu>
     e40:	5c 01       	movw	r10, r24
	menu_t* play_game = new_menu("Play Game", main_menu);
     e42:	b3 01       	movw	r22, r6
     e44:	8d ed       	ldi	r24, 0xDD	; 221
     e46:	91 e0       	ldi	r25, 0x01	; 1
     e48:	0e 94 bc 05 	call	0xb78	; 0xb78 <new_menu>
     e4c:	4c 01       	movw	r8, r24
	menu_t* calibrate_joystick = new_menu("Calibrate Joystick", main_menu);
     e4e:	b3 01       	movw	r22, r6
     e50:	87 ee       	ldi	r24, 0xE7	; 231
     e52:	91 e0       	ldi	r25, 0x01	; 1
     e54:	0e 94 bc 05 	call	0xb78	; 0xb78 <new_menu>
     e58:	6c 01       	movw	r12, r24
	menu_t* set_difficulty = new_menu("Set Difficulty", main_menu);
     e5a:	b3 01       	movw	r22, r6
     e5c:	8a ef       	ldi	r24, 0xFA	; 250
     e5e:	91 e0       	ldi	r25, 0x01	; 1
     e60:	0e 94 bc 05 	call	0xb78	; 0xb78 <new_menu>
     e64:	ec 01       	movw	r28, r24
	
	
	
	menu_t* easy = new_menu("Newbie", set_difficulty);
     e66:	bc 01       	movw	r22, r24
     e68:	89 e0       	ldi	r24, 0x09	; 9
     e6a:	92 e0       	ldi	r25, 0x02	; 2
     e6c:	0e 94 bc 05 	call	0xb78	; 0xb78 <new_menu>
     e70:	7c 01       	movw	r14, r24
	menu_t* medium = new_menu("Intermediate", set_difficulty);
     e72:	be 01       	movw	r22, r28
     e74:	80 e1       	ldi	r24, 0x10	; 16
     e76:	92 e0       	ldi	r25, 0x02	; 2
     e78:	0e 94 bc 05 	call	0xb78	; 0xb78 <new_menu>
     e7c:	8c 01       	movw	r16, r24
	menu_t* hard = new_menu("You got what it Takes!", set_difficulty);
     e7e:	be 01       	movw	r22, r28
     e80:	8d e1       	ldi	r24, 0x1D	; 29
     e82:	92 e0       	ldi	r25, 0x02	; 2
     e84:	0e 94 bc 05 	call	0xb78	; 0xb78 <new_menu>
void set_right_sibling(menu_t* menu, menu_t* right_sibling) {
	menu->right_sibling = right_sibling;
}

void set_first_child(menu_t* menu, menu_t* first_child) {
	menu->first_child = first_child;
     e88:	f3 01       	movw	r30, r6
     e8a:	95 82       	std	Z+5, r9	; 0x05
     e8c:	84 82       	std	Z+4, r8	; 0x04
	menu->first_child = NULL;
	return menu;
}

void set_right_sibling(menu_t* menu, menu_t* right_sibling) {
	menu->right_sibling = right_sibling;
     e8e:	f4 01       	movw	r30, r8
     e90:	b7 82       	std	Z+7, r11	; 0x07
     e92:	a6 82       	std	Z+6, r10	; 0x06
     e94:	f5 01       	movw	r30, r10
     e96:	d7 82       	std	Z+7, r13	; 0x07
     e98:	c6 82       	std	Z+6, r12	; 0x06
     e9a:	f6 01       	movw	r30, r12
     e9c:	d7 83       	std	Z+7, r29	; 0x07
     e9e:	c6 83       	std	Z+6, r28	; 0x06
}

void set_first_child(menu_t* menu, menu_t* first_child) {
	menu->first_child = first_child;
     ea0:	fd 82       	std	Y+5, r15	; 0x05
     ea2:	ec 82       	std	Y+4, r14	; 0x04
	menu->first_child = NULL;
	return menu;
}

void set_right_sibling(menu_t* menu, menu_t* right_sibling) {
	menu->right_sibling = right_sibling;
     ea4:	f7 01       	movw	r30, r14
     ea6:	17 83       	std	Z+7, r17	; 0x07
     ea8:	06 83       	std	Z+6, r16	; 0x06
     eaa:	f8 01       	movw	r30, r16
     eac:	97 83       	std	Z+7, r25	; 0x07
     eae:	86 83       	std	Z+6, r24	; 0x06
	set_right_sibling(easy, medium);
	set_right_sibling(medium, hard);
	
	
	
	current_menu = main_menu;
     eb0:	70 92 bf 03 	sts	0x03BF, r7
     eb4:	60 92 be 03 	sts	0x03BE, r6
	current_menu_size = size_of_menu(current_menu);
     eb8:	c3 01       	movw	r24, r6
     eba:	0e 94 d4 05 	call	0xba8	; 0xba8 <size_of_menu>
     ebe:	90 93 c1 03 	sts	0x03C1, r25
     ec2:	80 93 c0 03 	sts	0x03C0, r24
	oled_menu_print(current_menu);
     ec6:	c3 01       	movw	r24, r6
     ec8:	0e 94 0d 06 	call	0xc1a	; 0xc1a <oled_menu_print>

	return current_menu;
}
     ecc:	80 91 be 03 	lds	r24, 0x03BE
     ed0:	90 91 bf 03 	lds	r25, 0x03BF
     ed4:	df 91       	pop	r29
     ed6:	cf 91       	pop	r28
     ed8:	1f 91       	pop	r17
     eda:	0f 91       	pop	r16
     edc:	ff 90       	pop	r15
     ede:	ef 90       	pop	r14
     ee0:	df 90       	pop	r13
     ee2:	cf 90       	pop	r12
     ee4:	bf 90       	pop	r11
     ee6:	af 90       	pop	r10
     ee8:	9f 90       	pop	r9
     eea:	8f 90       	pop	r8
     eec:	7f 90       	pop	r7
     eee:	6f 90       	pop	r6
     ef0:	08 95       	ret

00000ef2 <goto_menu>:
			}
		return NONE;
	}
}

void goto_menu(usb_button_t button) {
     ef2:	cf 93       	push	r28
     ef4:	df 93       	push	r29
	
	display_line_offset = 0;
     ef6:	10 92 a7 03 	sts	0x03A7, r1
     efa:	10 92 a6 03 	sts	0x03A6, r1
	int i = 2;
	menu_t* selected_menu = current_menu;
     efe:	c0 91 be 03 	lds	r28, 0x03BE
     f02:	d0 91 bf 03 	lds	r29, 0x03BF
	
	if (button == RBUTTON) {
     f06:	82 30       	cpi	r24, 0x02	; 2
     f08:	b9 f4       	brne	.+46     	; 0xf38 <goto_menu+0x46>
		selected_menu = current_menu->first_child;
     f0a:	0c 80       	ldd	r0, Y+4	; 0x04
     f0c:	dd 81       	ldd	r29, Y+5	; 0x05
     f0e:	c0 2d       	mov	r28, r0
		for (i; i < current_line; i++) {
     f10:	80 91 32 01 	lds	r24, 0x0132
     f14:	90 91 33 01 	lds	r25, 0x0133
     f18:	03 97       	sbiw	r24, 0x03	; 3
     f1a:	9c f0       	brlt	.+38     	; 0xf42 <goto_menu+0x50>
}

void goto_menu(usb_button_t button) {
	
	display_line_offset = 0;
	int i = 2;
     f1c:	82 e0       	ldi	r24, 0x02	; 2
     f1e:	90 e0       	ldi	r25, 0x00	; 0
	menu_t* selected_menu = current_menu;
	
	if (button == RBUTTON) {
		selected_menu = current_menu->first_child;
		for (i; i < current_line; i++) {
			selected_menu = selected_menu->right_sibling;
     f20:	0e 80       	ldd	r0, Y+6	; 0x06
     f22:	df 81       	ldd	r29, Y+7	; 0x07
     f24:	c0 2d       	mov	r28, r0
	int i = 2;
	menu_t* selected_menu = current_menu;
	
	if (button == RBUTTON) {
		selected_menu = current_menu->first_child;
		for (i; i < current_line; i++) {
     f26:	01 96       	adiw	r24, 0x01	; 1
     f28:	20 91 32 01 	lds	r18, 0x0132
     f2c:	30 91 33 01 	lds	r19, 0x0133
     f30:	82 17       	cp	r24, r18
     f32:	93 07       	cpc	r25, r19
     f34:	ac f3       	brlt	.-22     	; 0xf20 <goto_menu+0x2e>
     f36:	05 c0       	rjmp	.+10     	; 0xf42 <goto_menu+0x50>
			selected_menu = selected_menu->right_sibling;
		}
	}
	else if (button == LBUTTON) {
     f38:	81 30       	cpi	r24, 0x01	; 1
     f3a:	19 f4       	brne	.+6      	; 0xf42 <goto_menu+0x50>
		selected_menu = current_menu->parent;
     f3c:	0a 80       	ldd	r0, Y+2	; 0x02
     f3e:	db 81       	ldd	r29, Y+3	; 0x03
     f40:	c0 2d       	mov	r28, r0
	}

	if (selected_menu == NULL) {
     f42:	20 97       	sbiw	r28, 0x00	; 0
     f44:	e1 f0       	breq	.+56     	; 0xf7e <goto_menu+0x8c>

		return;
	} else {
		current_menu = selected_menu;
     f46:	d0 93 bf 03 	sts	0x03BF, r29
     f4a:	c0 93 be 03 	sts	0x03BE, r28
		current_menu_size = size_of_menu(current_menu);
     f4e:	ce 01       	movw	r24, r28
     f50:	0e 94 d4 05 	call	0xba8	; 0xba8 <size_of_menu>
     f54:	90 93 c1 03 	sts	0x03C1, r25
     f58:	80 93 c0 03 	sts	0x03C0, r24
		current_line = 2;
     f5c:	82 e0       	ldi	r24, 0x02	; 2
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	90 93 33 01 	sts	0x0133, r25
     f64:	80 93 32 01 	sts	0x0132, r24
		cutter = 0;
     f68:	10 92 ab 03 	sts	0x03AB, r1
     f6c:	10 92 aa 03 	sts	0x03AA, r1
		title_cutter = 0;
     f70:	10 92 a9 03 	sts	0x03A9, r1
     f74:	10 92 a8 03 	sts	0x03A8, r1
		oled_menu_print(selected_menu);
     f78:	ce 01       	movw	r24, r28
     f7a:	0e 94 0d 06 	call	0xc1a	; 0xc1a <oled_menu_print>
		return;
	}
}
     f7e:	df 91       	pop	r29
     f80:	cf 91       	pop	r28
     f82:	08 95       	ret

00000f84 <oled_menu_selection>:
	return current_menu;
}

menu_option_t oled_menu_selection() {
	
	joystick_direction_t direction = joystick_get_direction();
     f84:	0e 94 87 05 	call	0xb0e	; 0xb0e <joystick_get_direction>
	
	if (direction == UP) {
     f88:	82 30       	cpi	r24, 0x02	; 2
     f8a:	09 f0       	breq	.+2      	; 0xf8e <oled_menu_selection+0xa>
     f8c:	4f c0       	rjmp	.+158    	; 0x102c <oled_menu_selection+0xa8>
		cutter = 0;
     f8e:	10 92 ab 03 	sts	0x03AB, r1
     f92:	10 92 aa 03 	sts	0x03AA, r1
		title_cutter = 0;
     f96:	10 92 a9 03 	sts	0x03A9, r1
     f9a:	10 92 a8 03 	sts	0x03A8, r1
		current_line--;
     f9e:	80 91 32 01 	lds	r24, 0x0132
     fa2:	90 91 33 01 	lds	r25, 0x0133
     fa6:	01 97       	sbiw	r24, 0x01	; 1
     fa8:	90 93 33 01 	sts	0x0133, r25
     fac:	80 93 32 01 	sts	0x0132, r24
		if (current_line < 2) {
     fb0:	80 91 32 01 	lds	r24, 0x0132
     fb4:	90 91 33 01 	lds	r25, 0x0133
     fb8:	02 97       	sbiw	r24, 0x02	; 2
     fba:	ec f4       	brge	.+58     	; 0xff6 <oled_menu_selection+0x72>
			current_line = current_line+current_menu_size;
     fbc:	20 91 32 01 	lds	r18, 0x0132
     fc0:	30 91 33 01 	lds	r19, 0x0133
     fc4:	80 91 c0 03 	lds	r24, 0x03C0
     fc8:	90 91 c1 03 	lds	r25, 0x03C1
     fcc:	82 0f       	add	r24, r18
     fce:	93 1f       	adc	r25, r19
     fd0:	90 93 33 01 	sts	0x0133, r25
     fd4:	80 93 32 01 	sts	0x0132, r24
			if (current_menu_size > 6){
     fd8:	80 91 c0 03 	lds	r24, 0x03C0
     fdc:	90 91 c1 03 	lds	r25, 0x03C1
     fe0:	07 97       	sbiw	r24, 0x07	; 7
     fe2:	4c f0       	brlt	.+18     	; 0xff6 <oled_menu_selection+0x72>
				display_line_offset = current_menu_size - 5;
     fe4:	80 91 c0 03 	lds	r24, 0x03C0
     fe8:	90 91 c1 03 	lds	r25, 0x03C1
     fec:	05 97       	sbiw	r24, 0x05	; 5
     fee:	90 93 a7 03 	sts	0x03A7, r25
     ff2:	80 93 a6 03 	sts	0x03A6, r24
			}
		}
		if (current_line < display_line_offset + 2){
     ff6:	80 91 a6 03 	lds	r24, 0x03A6
     ffa:	90 91 a7 03 	lds	r25, 0x03A7
     ffe:	20 91 32 01 	lds	r18, 0x0132
    1002:	30 91 33 01 	lds	r19, 0x0133
    1006:	ac 01       	movw	r20, r24
    1008:	4e 5f       	subi	r20, 0xFE	; 254
    100a:	5f 4f       	sbci	r21, 0xFF	; 255
    100c:	24 17       	cp	r18, r20
    100e:	35 07       	cpc	r19, r21
    1010:	2c f4       	brge	.+10     	; 0x101c <oled_menu_selection+0x98>
			display_line_offset --;
    1012:	01 97       	sbiw	r24, 0x01	; 1
    1014:	90 93 a7 03 	sts	0x03A7, r25
    1018:	80 93 a6 03 	sts	0x03A6, r24
		}
		oled_menu_print(current_menu);
    101c:	80 91 be 03 	lds	r24, 0x03BE
    1020:	90 91 bf 03 	lds	r25, 0x03BF
    1024:	0e 94 0d 06 	call	0xc1a	; 0xc1a <oled_menu_print>
		return NONE;
    1028:	80 e0       	ldi	r24, 0x00	; 0
    102a:	08 95       	ret
	}
	else if (direction == DOWN) {
    102c:	83 30       	cpi	r24, 0x03	; 3
    102e:	09 f0       	breq	.+2      	; 0x1032 <oled_menu_selection+0xae>
    1030:	3f c0       	rjmp	.+126    	; 0x10b0 <oled_menu_selection+0x12c>
		cutter = 0;
    1032:	10 92 ab 03 	sts	0x03AB, r1
    1036:	10 92 aa 03 	sts	0x03AA, r1
		title_cutter = 0;
    103a:	10 92 a9 03 	sts	0x03A9, r1
    103e:	10 92 a8 03 	sts	0x03A8, r1
		current_line++;
    1042:	80 91 32 01 	lds	r24, 0x0132
    1046:	90 91 33 01 	lds	r25, 0x0133
    104a:	01 96       	adiw	r24, 0x01	; 1
    104c:	90 93 33 01 	sts	0x0133, r25
    1050:	80 93 32 01 	sts	0x0132, r24
		if (current_line >= 2 + current_menu_size) {
    1054:	20 91 c0 03 	lds	r18, 0x03C0
    1058:	30 91 c1 03 	lds	r19, 0x03C1
    105c:	80 91 32 01 	lds	r24, 0x0132
    1060:	90 91 33 01 	lds	r25, 0x0133
    1064:	2e 5f       	subi	r18, 0xFE	; 254
    1066:	3f 4f       	sbci	r19, 0xFF	; 255
    1068:	82 17       	cp	r24, r18
    106a:	93 07       	cpc	r25, r19
    106c:	54 f0       	brlt	.+20     	; 0x1082 <oled_menu_selection+0xfe>
			current_line = 2;
    106e:	82 e0       	ldi	r24, 0x02	; 2
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	90 93 33 01 	sts	0x0133, r25
    1076:	80 93 32 01 	sts	0x0132, r24
			display_line_offset = 0;
    107a:	10 92 a7 03 	sts	0x03A7, r1
    107e:	10 92 a6 03 	sts	0x03A6, r1
		}
		if (current_line > 6){
    1082:	80 91 32 01 	lds	r24, 0x0132
    1086:	90 91 33 01 	lds	r25, 0x0133
    108a:	07 97       	sbiw	r24, 0x07	; 7
    108c:	4c f0       	brlt	.+18     	; 0x10a0 <oled_menu_selection+0x11c>
			display_line_offset = current_line - 6;
    108e:	80 91 32 01 	lds	r24, 0x0132
    1092:	90 91 33 01 	lds	r25, 0x0133
    1096:	06 97       	sbiw	r24, 0x06	; 6
    1098:	90 93 a7 03 	sts	0x03A7, r25
    109c:	80 93 a6 03 	sts	0x03A6, r24
		}
		oled_menu_print(current_menu);
    10a0:	80 91 be 03 	lds	r24, 0x03BE
    10a4:	90 91 bf 03 	lds	r25, 0x03BF
    10a8:	0e 94 0d 06 	call	0xc1a	; 0xc1a <oled_menu_print>
		return NONE;
    10ac:	80 e0       	ldi	r24, 0x00	; 0
    10ae:	08 95       	ret
	}
	else {
		if (joystick_button(RBUTTON)) {
    10b0:	82 e0       	ldi	r24, 0x02	; 2
    10b2:	0e 94 5b 05 	call	0xab6	; 0xab6 <joystick_button>
    10b6:	89 2b       	or	r24, r25
    10b8:	89 f1       	breq	.+98     	; 0x111c <oled_menu_selection+0x198>
			
			goto_menu(RBUTTON);
    10ba:	82 e0       	ldi	r24, 0x02	; 2
    10bc:	0e 94 79 07 	call	0xef2	; 0xef2 <goto_menu>
			if (current_menu->title == "Play Game"){
    10c0:	e0 91 be 03 	lds	r30, 0x03BE
    10c4:	f0 91 bf 03 	lds	r31, 0x03BF
    10c8:	80 81       	ld	r24, Z
    10ca:	91 81       	ldd	r25, Z+1	; 0x01
    10cc:	8d 5d       	subi	r24, 0xDD	; 221
    10ce:	91 40       	sbci	r25, 0x01	; 1
    10d0:	09 f4       	brne	.+2      	; 0x10d4 <oled_menu_selection+0x150>
    10d2:	40 c0       	rjmp	.+128    	; 0x1154 <oled_menu_selection+0x1d0>
				return PLAY_GAME;
				}
			else if (current_menu->title == "Highscores"){
    10d4:	80 81       	ld	r24, Z
    10d6:	91 81       	ldd	r25, Z+1	; 0x01
    10d8:	82 5d       	subi	r24, 0xD2	; 210
    10da:	91 40       	sbci	r25, 0x01	; 1
    10dc:	09 f4       	brne	.+2      	; 0x10e0 <oled_menu_selection+0x15c>
    10de:	3c c0       	rjmp	.+120    	; 0x1158 <oled_menu_selection+0x1d4>
				return HIGHSCORE;
			}
			else if (current_menu->title == "Calibrate Joystick"){
    10e0:	80 81       	ld	r24, Z
    10e2:	91 81       	ldd	r25, Z+1	; 0x01
    10e4:	87 5e       	subi	r24, 0xE7	; 231
    10e6:	91 40       	sbci	r25, 0x01	; 1
    10e8:	c9 f1       	breq	.+114    	; 0x115c <oled_menu_selection+0x1d8>
				return AUTO_CALIBRATE;
			}
			else if (current_menu->title == "Newbie"){
    10ea:	80 81       	ld	r24, Z
    10ec:	91 81       	ldd	r25, Z+1	; 0x01
    10ee:	89 50       	subi	r24, 0x09	; 9
    10f0:	92 40       	sbci	r25, 0x02	; 2
    10f2:	51 f4       	brne	.+20     	; 0x1108 <oled_menu_selection+0x184>
				printf("Selected newbie");
    10f4:	84 e3       	ldi	r24, 0x34	; 52
    10f6:	92 e0       	ldi	r25, 0x02	; 2
    10f8:	9f 93       	push	r25
    10fa:	8f 93       	push	r24
    10fc:	0e 94 8e 0b 	call	0x171c	; 0x171c <printf>
				return EASY;
    1100:	0f 90       	pop	r0
    1102:	0f 90       	pop	r0
    1104:	86 e0       	ldi	r24, 0x06	; 6
    1106:	08 95       	ret
			}
			else if (current_menu->title == "Intermediate"){
    1108:	80 81       	ld	r24, Z
    110a:	91 81       	ldd	r25, Z+1	; 0x01
    110c:	80 51       	subi	r24, 0x10	; 16
    110e:	92 40       	sbci	r25, 0x02	; 2
    1110:	39 f1       	breq	.+78     	; 0x1160 <oled_menu_selection+0x1dc>
				return MEDIUM;
			}
			else if (current_menu->title == "You got what it Takes!"){
    1112:	80 81       	ld	r24, Z
    1114:	91 81       	ldd	r25, Z+1	; 0x01
    1116:	8d 51       	subi	r24, 0x1D	; 29
    1118:	92 40       	sbci	r25, 0x02	; 2
    111a:	21 f1       	breq	.+72     	; 0x1164 <oled_menu_selection+0x1e0>
				return HARD;
			}
			
		}
		if (joystick_button(LBUTTON)) {
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	0e 94 5b 05 	call	0xab6	; 0xab6 <joystick_button>
    1122:	89 2b       	or	r24, r25
    1124:	19 f0       	breq	.+6      	; 0x112c <oled_menu_selection+0x1a8>

			goto_menu(LBUTTON);
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	0e 94 79 07 	call	0xef2	; 0xef2 <goto_menu>
			
		}
		if (cutter != 0 || title_cutter != 0){
    112c:	80 91 aa 03 	lds	r24, 0x03AA
    1130:	90 91 ab 03 	lds	r25, 0x03AB
    1134:	89 2b       	or	r24, r25
    1136:	31 f4       	brne	.+12     	; 0x1144 <oled_menu_selection+0x1c0>
    1138:	80 91 a8 03 	lds	r24, 0x03A8
    113c:	90 91 a9 03 	lds	r25, 0x03A9
    1140:	89 2b       	or	r24, r25
    1142:	91 f0       	breq	.+36     	; 0x1168 <oled_menu_selection+0x1e4>
			oled_menu_print(current_menu);
    1144:	80 91 be 03 	lds	r24, 0x03BE
    1148:	90 91 bf 03 	lds	r25, 0x03BF
    114c:	0e 94 0d 06 	call	0xc1a	; 0xc1a <oled_menu_print>
			}
		return NONE;
    1150:	80 e0       	ldi	r24, 0x00	; 0
    1152:	08 95       	ret
	else {
		if (joystick_button(RBUTTON)) {
			
			goto_menu(RBUTTON);
			if (current_menu->title == "Play Game"){
				return PLAY_GAME;
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	08 95       	ret
				}
			else if (current_menu->title == "Highscores"){
				return HIGHSCORE;
    1158:	84 e0       	ldi	r24, 0x04	; 4
    115a:	08 95       	ret
			}
			else if (current_menu->title == "Calibrate Joystick"){
				return AUTO_CALIBRATE;
    115c:	85 e0       	ldi	r24, 0x05	; 5
    115e:	08 95       	ret
			else if (current_menu->title == "Newbie"){
				printf("Selected newbie");
				return EASY;
			}
			else if (current_menu->title == "Intermediate"){
				return MEDIUM;
    1160:	87 e0       	ldi	r24, 0x07	; 7
    1162:	08 95       	ret
			}
			else if (current_menu->title == "You got what it Takes!"){
				return HARD;
    1164:	88 e0       	ldi	r24, 0x08	; 8
    1166:	08 95       	ret
			
		}
		if (cutter != 0 || title_cutter != 0){
			oled_menu_print(current_menu);
			}
		return NONE;
    1168:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    116a:	08 95       	ret

0000116c <SRAM_Init>:
	
}

void SRAM_Init(void)
{
	MCUCR |= (1<<SRE);//Enable MCU external memory
    116c:	85 b7       	in	r24, 0x35	; 53
    116e:	80 68       	ori	r24, 0x80	; 128
    1170:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2); // External Memory Enabled
    1172:	80 b7       	in	r24, 0x30	; 48
    1174:	80 62       	ori	r24, 0x20	; 32
    1176:	80 bf       	out	0x30, r24	; 48
    1178:	08 95       	ret

0000117a <SRAM_test>:
	
}

void SRAM_test(void)
{
    117a:	cf 92       	push	r12
    117c:	df 92       	push	r13
    117e:	ef 92       	push	r14
    1180:	ff 92       	push	r15
    1182:	0f 93       	push	r16
    1184:	1f 93       	push	r17
    1186:	cf 93       	push	r28
    1188:	df 93       	push	r29
	USART_Init ( MYUBRR );
    118a:	8f e1       	ldi	r24, 0x1F	; 31
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	0e 94 4e 09 	call	0x129c	; 0x129c <USART_Init>
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size= 0x800;
	uint16_t write_errors= 0;
	uint16_t retrieval_errors= 0;
	printf("Starting SRAM test...\n");// rand() stores some internal state, so calling this function in a loop will yield different seeds each time (unless srand() is called before this function)
    1192:	89 eb       	ldi	r24, 0xB9	; 185
    1194:	92 e0       	ldi	r25, 0x02	; 2
    1196:	0e 94 a2 0b 	call	0x1744	; 0x1744 <puts>
	uint16_t seed = rand();
    119a:	0e 94 2b 0b 	call	0x1656	; 0x1656 <rand>
    119e:	6c 01       	movw	r12, r24
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
    11a0:	0e 94 30 0b 	call	0x1660	; 0x1660 <srand>
	for (uint16_t i = 0; i < ext_ram_size; i++)
    11a4:	c0 e0       	ldi	r28, 0x00	; 0
    11a6:	d0 e0       	ldi	r29, 0x00	; 0
void SRAM_test(void)
{
	USART_Init ( MYUBRR );
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size= 0x800;
	uint16_t write_errors= 0;
    11a8:	00 e0       	ldi	r16, 0x00	; 0
    11aa:	10 e0       	ldi	r17, 0x00	; 0
	for (uint16_t i = 0; i < ext_ram_size; i++)
	{   uint8_t some_value = rand();
		ext_ram[i] = some_value;
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value)
		{ printf("\nWrite phase error: ext_ram[%4d] = %02X (should be %02X)\r", i, retreived_value, some_value);
    11ac:	0f 2e       	mov	r0, r31
    11ae:	ff ec       	ldi	r31, 0xCF	; 207
    11b0:	ef 2e       	mov	r14, r31
    11b2:	f2 e0       	ldi	r31, 0x02	; 2
    11b4:	ff 2e       	mov	r15, r31
    11b6:	f0 2d       	mov	r31, r0
	printf("Starting SRAM test...\n");// rand() stores some internal state, so calling this function in a loop will yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++)
	{   uint8_t some_value = rand();
    11b8:	0e 94 2b 0b 	call	0x1656	; 0x1656 <rand>
    11bc:	fe 01       	movw	r30, r28
    11be:	f8 5e       	subi	r31, 0xE8	; 232
		ext_ram[i] = some_value;
    11c0:	80 83       	st	Z, r24
		uint8_t retreived_value = ext_ram[i];
    11c2:	20 81       	ld	r18, Z
		if (retreived_value != some_value)
    11c4:	28 17       	cp	r18, r24
    11c6:	a9 f0       	breq	.+42     	; 0x11f2 <SRAM_test+0x78>
		{ printf("\nWrite phase error: ext_ram[%4d] = %02X (should be %02X)\r", i, retreived_value, some_value);
    11c8:	99 27       	eor	r25, r25
    11ca:	9f 93       	push	r25
    11cc:	8f 93       	push	r24
    11ce:	1f 92       	push	r1
    11d0:	2f 93       	push	r18
    11d2:	df 93       	push	r29
    11d4:	cf 93       	push	r28
    11d6:	ff 92       	push	r15
    11d8:	ef 92       	push	r14
    11da:	0e 94 8e 0b 	call	0x171c	; 0x171c <printf>
			write_errors++;
    11de:	0f 5f       	subi	r16, 0xFF	; 255
    11e0:	1f 4f       	sbci	r17, 0xFF	; 255
    11e2:	8d b7       	in	r24, 0x3d	; 61
    11e4:	9e b7       	in	r25, 0x3e	; 62
    11e6:	08 96       	adiw	r24, 0x08	; 8
    11e8:	0f b6       	in	r0, 0x3f	; 63
    11ea:	f8 94       	cli
    11ec:	9e bf       	out	0x3e, r25	; 62
    11ee:	0f be       	out	0x3f, r0	; 63
    11f0:	8d bf       	out	0x3d, r24	; 61
	uint16_t retrieval_errors= 0;
	printf("Starting SRAM test...\n");// rand() stores some internal state, so calling this function in a loop will yield different seeds each time (unless srand() is called before this function)
	uint16_t seed = rand();
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++)
    11f2:	21 96       	adiw	r28, 0x01	; 1
    11f4:	c1 15       	cp	r28, r1
    11f6:	98 e0       	ldi	r25, 0x08	; 8
    11f8:	d9 07       	cpc	r29, r25
    11fa:	f1 f6       	brne	.-68     	; 0x11b8 <SRAM_test+0x3e>
		{ printf("\nWrite phase error: ext_ram[%4d] = %02X (should be %02X)\r", i, retreived_value, some_value);
			write_errors++;
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);// reset the PRNG to the state it had before the write phase
    11fc:	c6 01       	movw	r24, r12
    11fe:	0e 94 30 0b 	call	0x1660	; 0x1660 <srand>
	for (uint16_t i = 0; i < ext_ram_size; i++)
    1202:	c0 e0       	ldi	r28, 0x00	; 0
    1204:	d0 e0       	ldi	r29, 0x00	; 0
{
	USART_Init ( MYUBRR );
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size= 0x800;
	uint16_t write_errors= 0;
	uint16_t retrieval_errors= 0;
    1206:	e1 2c       	mov	r14, r1
    1208:	f1 2c       	mov	r15, r1
	srand(seed);// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++)
	{ uint8_t some_value = rand();
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value)
		{   printf("\nRetrieval phase error: ext_ram[%4d] = %02X (should be %02X)\r", i, retreived_value, some_value);
    120a:	0f 2e       	mov	r0, r31
    120c:	f9 e0       	ldi	r31, 0x09	; 9
    120e:	cf 2e       	mov	r12, r31
    1210:	f3 e0       	ldi	r31, 0x03	; 3
    1212:	df 2e       	mov	r13, r31
    1214:	f0 2d       	mov	r31, r0
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++)
	{ uint8_t some_value = rand();
    1216:	0e 94 2b 0b 	call	0x1656	; 0x1656 <rand>
    121a:	fe 01       	movw	r30, r28
    121c:	f8 5e       	subi	r31, 0xE8	; 232
		uint8_t retreived_value = ext_ram[i];
    121e:	20 81       	ld	r18, Z
		if (retreived_value != some_value)
    1220:	28 17       	cp	r18, r24
    1222:	b1 f0       	breq	.+44     	; 0x1250 <SRAM_test+0xd6>
		{   printf("\nRetrieval phase error: ext_ram[%4d] = %02X (should be %02X)\r", i, retreived_value, some_value);
    1224:	99 27       	eor	r25, r25
    1226:	9f 93       	push	r25
    1228:	8f 93       	push	r24
    122a:	1f 92       	push	r1
    122c:	2f 93       	push	r18
    122e:	df 93       	push	r29
    1230:	cf 93       	push	r28
    1232:	df 92       	push	r13
    1234:	cf 92       	push	r12
    1236:	0e 94 8e 0b 	call	0x171c	; 0x171c <printf>
			retrieval_errors++;
    123a:	8f ef       	ldi	r24, 0xFF	; 255
    123c:	e8 1a       	sub	r14, r24
    123e:	f8 0a       	sbc	r15, r24
    1240:	8d b7       	in	r24, 0x3d	; 61
    1242:	9e b7       	in	r25, 0x3e	; 62
    1244:	08 96       	adiw	r24, 0x08	; 8
    1246:	0f b6       	in	r0, 0x3f	; 63
    1248:	f8 94       	cli
    124a:	9e bf       	out	0x3e, r25	; 62
    124c:	0f be       	out	0x3f, r0	; 63
    124e:	8d bf       	out	0x3d, r24	; 61
			write_errors++;
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++)
    1250:	21 96       	adiw	r28, 0x01	; 1
    1252:	c1 15       	cp	r28, r1
    1254:	98 e0       	ldi	r25, 0x08	; 8
    1256:	d9 07       	cpc	r29, r25
    1258:	f1 f6       	brne	.-68     	; 0x1216 <SRAM_test+0x9c>
		if (retreived_value != some_value)
		{   printf("\nRetrieval phase error: ext_ram[%4d] = %02X (should be %02X)\r", i, retreived_value, some_value);
			retrieval_errors++;
		}
	}
	printf("SRAM test completed with \n%4d errors in write phase and \n%4d errors in retrieval phase\r\n\n", write_errors, retrieval_errors);
    125a:	ff 92       	push	r15
    125c:	ef 92       	push	r14
    125e:	1f 93       	push	r17
    1260:	0f 93       	push	r16
    1262:	87 e4       	ldi	r24, 0x47	; 71
    1264:	93 e0       	ldi	r25, 0x03	; 3
    1266:	9f 93       	push	r25
    1268:	8f 93       	push	r24
    126a:	0e 94 8e 0b 	call	0x171c	; 0x171c <printf>
    126e:	0f 90       	pop	r0
    1270:	0f 90       	pop	r0
    1272:	0f 90       	pop	r0
    1274:	0f 90       	pop	r0
    1276:	0f 90       	pop	r0
    1278:	0f 90       	pop	r0
    127a:	df 91       	pop	r29
    127c:	cf 91       	pop	r28
    127e:	1f 91       	pop	r17
    1280:	0f 91       	pop	r16
    1282:	ff 90       	pop	r15
    1284:	ef 90       	pop	r14
    1286:	df 90       	pop	r13
    1288:	cf 90       	pop	r12
    128a:	08 95       	ret

0000128c <USART_Transmit>:
	fdevopen(USART_Transmit, USART_Receive);
}

void USART_Transmit( unsigned char data )
{/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )// Keep waiting till UDRE0 = 1
    128c:	5d 9b       	sbis	0x0b, 5	; 11
    128e:	fe cf       	rjmp	.-4      	; 0x128c <USART_Transmit>
	;
	/* Put data into buffer, sends the data */
	UDR0 = data;
    1290:	8c b9       	out	0x0c, r24	; 12
    1292:	08 95       	ret

00001294 <USART_Receive>:
}


unsigned char USART_Receive( void )
{/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) ) // Loop keeps running till RXC0 =1
    1294:	5f 9b       	sbis	0x0b, 7	; 11
    1296:	fe cf       	rjmp	.-4      	; 0x1294 <USART_Receive>
	;
	/* Get and return received data from buffer */
	return UDR0;
    1298:	8c b1       	in	r24, 0x0c	; 12
}
    129a:	08 95       	ret

0000129c <USART_Init>:
#include "UART.h"


void USART_Init( unsigned int ubrr )
{/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);//load upper 8 bits of ubbr into UBBRH
    129c:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
    129e:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0); // = implies all the other bits are reset
    12a0:	88 e1       	ldi	r24, 0x18	; 24
    12a2:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00); // UCSZ00 =1?
    12a4:	8e e8       	ldi	r24, 0x8E	; 142
    12a6:	80 bd       	out	0x20, r24	; 32
	fdevopen(USART_Transmit, USART_Receive);
    12a8:	6a e4       	ldi	r22, 0x4A	; 74
    12aa:	79 e0       	ldi	r23, 0x09	; 9
    12ac:	86 e4       	ldi	r24, 0x46	; 70
    12ae:	99 e0       	ldi	r25, 0x09	; 9
    12b0:	0e 94 43 0b 	call	0x1686	; 0x1686 <fdevopen>
    12b4:	08 95       	ret

000012b6 <__divmodsi4>:
    12b6:	05 2e       	mov	r0, r21
    12b8:	97 fb       	bst	r25, 7
    12ba:	1e f4       	brtc	.+6      	; 0x12c2 <__divmodsi4+0xc>
    12bc:	00 94       	com	r0
    12be:	0e 94 72 09 	call	0x12e4	; 0x12e4 <__negsi2>
    12c2:	57 fd       	sbrc	r21, 7
    12c4:	07 d0       	rcall	.+14     	; 0x12d4 <__divmodsi4_neg2>
    12c6:	0e 94 85 09 	call	0x130a	; 0x130a <__udivmodsi4>
    12ca:	07 fc       	sbrc	r0, 7
    12cc:	03 d0       	rcall	.+6      	; 0x12d4 <__divmodsi4_neg2>
    12ce:	4e f4       	brtc	.+18     	; 0x12e2 <__divmodsi4_exit>
    12d0:	0c 94 72 09 	jmp	0x12e4	; 0x12e4 <__negsi2>

000012d4 <__divmodsi4_neg2>:
    12d4:	50 95       	com	r21
    12d6:	40 95       	com	r20
    12d8:	30 95       	com	r19
    12da:	21 95       	neg	r18
    12dc:	3f 4f       	sbci	r19, 0xFF	; 255
    12de:	4f 4f       	sbci	r20, 0xFF	; 255
    12e0:	5f 4f       	sbci	r21, 0xFF	; 255

000012e2 <__divmodsi4_exit>:
    12e2:	08 95       	ret

000012e4 <__negsi2>:
    12e4:	90 95       	com	r25
    12e6:	80 95       	com	r24
    12e8:	70 95       	com	r23
    12ea:	61 95       	neg	r22
    12ec:	7f 4f       	sbci	r23, 0xFF	; 255
    12ee:	8f 4f       	sbci	r24, 0xFF	; 255
    12f0:	9f 4f       	sbci	r25, 0xFF	; 255
    12f2:	08 95       	ret

000012f4 <__muluhisi3>:
    12f4:	0e 94 a7 09 	call	0x134e	; 0x134e <__umulhisi3>
    12f8:	a5 9f       	mul	r26, r21
    12fa:	90 0d       	add	r25, r0
    12fc:	b4 9f       	mul	r27, r20
    12fe:	90 0d       	add	r25, r0
    1300:	a4 9f       	mul	r26, r20
    1302:	80 0d       	add	r24, r0
    1304:	91 1d       	adc	r25, r1
    1306:	11 24       	eor	r1, r1
    1308:	08 95       	ret

0000130a <__udivmodsi4>:
    130a:	a1 e2       	ldi	r26, 0x21	; 33
    130c:	1a 2e       	mov	r1, r26
    130e:	aa 1b       	sub	r26, r26
    1310:	bb 1b       	sub	r27, r27
    1312:	fd 01       	movw	r30, r26
    1314:	0d c0       	rjmp	.+26     	; 0x1330 <__udivmodsi4_ep>

00001316 <__udivmodsi4_loop>:
    1316:	aa 1f       	adc	r26, r26
    1318:	bb 1f       	adc	r27, r27
    131a:	ee 1f       	adc	r30, r30
    131c:	ff 1f       	adc	r31, r31
    131e:	a2 17       	cp	r26, r18
    1320:	b3 07       	cpc	r27, r19
    1322:	e4 07       	cpc	r30, r20
    1324:	f5 07       	cpc	r31, r21
    1326:	20 f0       	brcs	.+8      	; 0x1330 <__udivmodsi4_ep>
    1328:	a2 1b       	sub	r26, r18
    132a:	b3 0b       	sbc	r27, r19
    132c:	e4 0b       	sbc	r30, r20
    132e:	f5 0b       	sbc	r31, r21

00001330 <__udivmodsi4_ep>:
    1330:	66 1f       	adc	r22, r22
    1332:	77 1f       	adc	r23, r23
    1334:	88 1f       	adc	r24, r24
    1336:	99 1f       	adc	r25, r25
    1338:	1a 94       	dec	r1
    133a:	69 f7       	brne	.-38     	; 0x1316 <__udivmodsi4_loop>
    133c:	60 95       	com	r22
    133e:	70 95       	com	r23
    1340:	80 95       	com	r24
    1342:	90 95       	com	r25
    1344:	9b 01       	movw	r18, r22
    1346:	ac 01       	movw	r20, r24
    1348:	bd 01       	movw	r22, r26
    134a:	cf 01       	movw	r24, r30
    134c:	08 95       	ret

0000134e <__umulhisi3>:
    134e:	a2 9f       	mul	r26, r18
    1350:	b0 01       	movw	r22, r0
    1352:	b3 9f       	mul	r27, r19
    1354:	c0 01       	movw	r24, r0
    1356:	a3 9f       	mul	r26, r19
    1358:	70 0d       	add	r23, r0
    135a:	81 1d       	adc	r24, r1
    135c:	11 24       	eor	r1, r1
    135e:	91 1d       	adc	r25, r1
    1360:	b2 9f       	mul	r27, r18
    1362:	70 0d       	add	r23, r0
    1364:	81 1d       	adc	r24, r1
    1366:	11 24       	eor	r1, r1
    1368:	91 1d       	adc	r25, r1
    136a:	08 95       	ret

0000136c <malloc>:
    136c:	cf 93       	push	r28
    136e:	df 93       	push	r29
    1370:	82 30       	cpi	r24, 0x02	; 2
    1372:	91 05       	cpc	r25, r1
    1374:	10 f4       	brcc	.+4      	; 0x137a <malloc+0xe>
    1376:	82 e0       	ldi	r24, 0x02	; 2
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	e0 91 c4 03 	lds	r30, 0x03C4
    137e:	f0 91 c5 03 	lds	r31, 0x03C5
    1382:	20 e0       	ldi	r18, 0x00	; 0
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	a0 e0       	ldi	r26, 0x00	; 0
    1388:	b0 e0       	ldi	r27, 0x00	; 0
    138a:	30 97       	sbiw	r30, 0x00	; 0
    138c:	39 f1       	breq	.+78     	; 0x13dc <malloc+0x70>
    138e:	40 81       	ld	r20, Z
    1390:	51 81       	ldd	r21, Z+1	; 0x01
    1392:	48 17       	cp	r20, r24
    1394:	59 07       	cpc	r21, r25
    1396:	b8 f0       	brcs	.+46     	; 0x13c6 <malloc+0x5a>
    1398:	48 17       	cp	r20, r24
    139a:	59 07       	cpc	r21, r25
    139c:	71 f4       	brne	.+28     	; 0x13ba <malloc+0x4e>
    139e:	82 81       	ldd	r24, Z+2	; 0x02
    13a0:	93 81       	ldd	r25, Z+3	; 0x03
    13a2:	10 97       	sbiw	r26, 0x00	; 0
    13a4:	29 f0       	breq	.+10     	; 0x13b0 <malloc+0x44>
    13a6:	13 96       	adiw	r26, 0x03	; 3
    13a8:	9c 93       	st	X, r25
    13aa:	8e 93       	st	-X, r24
    13ac:	12 97       	sbiw	r26, 0x02	; 2
    13ae:	2c c0       	rjmp	.+88     	; 0x1408 <malloc+0x9c>
    13b0:	90 93 c5 03 	sts	0x03C5, r25
    13b4:	80 93 c4 03 	sts	0x03C4, r24
    13b8:	27 c0       	rjmp	.+78     	; 0x1408 <malloc+0x9c>
    13ba:	21 15       	cp	r18, r1
    13bc:	31 05       	cpc	r19, r1
    13be:	31 f0       	breq	.+12     	; 0x13cc <malloc+0x60>
    13c0:	42 17       	cp	r20, r18
    13c2:	53 07       	cpc	r21, r19
    13c4:	18 f0       	brcs	.+6      	; 0x13cc <malloc+0x60>
    13c6:	a9 01       	movw	r20, r18
    13c8:	db 01       	movw	r26, r22
    13ca:	01 c0       	rjmp	.+2      	; 0x13ce <malloc+0x62>
    13cc:	ef 01       	movw	r28, r30
    13ce:	9a 01       	movw	r18, r20
    13d0:	bd 01       	movw	r22, r26
    13d2:	df 01       	movw	r26, r30
    13d4:	02 80       	ldd	r0, Z+2	; 0x02
    13d6:	f3 81       	ldd	r31, Z+3	; 0x03
    13d8:	e0 2d       	mov	r30, r0
    13da:	d7 cf       	rjmp	.-82     	; 0x138a <malloc+0x1e>
    13dc:	21 15       	cp	r18, r1
    13de:	31 05       	cpc	r19, r1
    13e0:	f9 f0       	breq	.+62     	; 0x1420 <malloc+0xb4>
    13e2:	28 1b       	sub	r18, r24
    13e4:	39 0b       	sbc	r19, r25
    13e6:	24 30       	cpi	r18, 0x04	; 4
    13e8:	31 05       	cpc	r19, r1
    13ea:	80 f4       	brcc	.+32     	; 0x140c <malloc+0xa0>
    13ec:	8a 81       	ldd	r24, Y+2	; 0x02
    13ee:	9b 81       	ldd	r25, Y+3	; 0x03
    13f0:	61 15       	cp	r22, r1
    13f2:	71 05       	cpc	r23, r1
    13f4:	21 f0       	breq	.+8      	; 0x13fe <malloc+0x92>
    13f6:	fb 01       	movw	r30, r22
    13f8:	93 83       	std	Z+3, r25	; 0x03
    13fa:	82 83       	std	Z+2, r24	; 0x02
    13fc:	04 c0       	rjmp	.+8      	; 0x1406 <malloc+0x9a>
    13fe:	90 93 c5 03 	sts	0x03C5, r25
    1402:	80 93 c4 03 	sts	0x03C4, r24
    1406:	fe 01       	movw	r30, r28
    1408:	32 96       	adiw	r30, 0x02	; 2
    140a:	44 c0       	rjmp	.+136    	; 0x1494 <malloc+0x128>
    140c:	fe 01       	movw	r30, r28
    140e:	e2 0f       	add	r30, r18
    1410:	f3 1f       	adc	r31, r19
    1412:	81 93       	st	Z+, r24
    1414:	91 93       	st	Z+, r25
    1416:	22 50       	subi	r18, 0x02	; 2
    1418:	31 09       	sbc	r19, r1
    141a:	39 83       	std	Y+1, r19	; 0x01
    141c:	28 83       	st	Y, r18
    141e:	3a c0       	rjmp	.+116    	; 0x1494 <malloc+0x128>
    1420:	20 91 c2 03 	lds	r18, 0x03C2
    1424:	30 91 c3 03 	lds	r19, 0x03C3
    1428:	23 2b       	or	r18, r19
    142a:	41 f4       	brne	.+16     	; 0x143c <malloc+0xd0>
    142c:	20 91 02 01 	lds	r18, 0x0102
    1430:	30 91 03 01 	lds	r19, 0x0103
    1434:	30 93 c3 03 	sts	0x03C3, r19
    1438:	20 93 c2 03 	sts	0x03C2, r18
    143c:	20 91 00 01 	lds	r18, 0x0100
    1440:	30 91 01 01 	lds	r19, 0x0101
    1444:	21 15       	cp	r18, r1
    1446:	31 05       	cpc	r19, r1
    1448:	41 f4       	brne	.+16     	; 0x145a <malloc+0xee>
    144a:	2d b7       	in	r18, 0x3d	; 61
    144c:	3e b7       	in	r19, 0x3e	; 62
    144e:	40 91 04 01 	lds	r20, 0x0104
    1452:	50 91 05 01 	lds	r21, 0x0105
    1456:	24 1b       	sub	r18, r20
    1458:	35 0b       	sbc	r19, r21
    145a:	e0 91 c2 03 	lds	r30, 0x03C2
    145e:	f0 91 c3 03 	lds	r31, 0x03C3
    1462:	e2 17       	cp	r30, r18
    1464:	f3 07       	cpc	r31, r19
    1466:	a0 f4       	brcc	.+40     	; 0x1490 <malloc+0x124>
    1468:	2e 1b       	sub	r18, r30
    146a:	3f 0b       	sbc	r19, r31
    146c:	28 17       	cp	r18, r24
    146e:	39 07       	cpc	r19, r25
    1470:	78 f0       	brcs	.+30     	; 0x1490 <malloc+0x124>
    1472:	ac 01       	movw	r20, r24
    1474:	4e 5f       	subi	r20, 0xFE	; 254
    1476:	5f 4f       	sbci	r21, 0xFF	; 255
    1478:	24 17       	cp	r18, r20
    147a:	35 07       	cpc	r19, r21
    147c:	48 f0       	brcs	.+18     	; 0x1490 <malloc+0x124>
    147e:	4e 0f       	add	r20, r30
    1480:	5f 1f       	adc	r21, r31
    1482:	50 93 c3 03 	sts	0x03C3, r21
    1486:	40 93 c2 03 	sts	0x03C2, r20
    148a:	81 93       	st	Z+, r24
    148c:	91 93       	st	Z+, r25
    148e:	02 c0       	rjmp	.+4      	; 0x1494 <malloc+0x128>
    1490:	e0 e0       	ldi	r30, 0x00	; 0
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	cf 01       	movw	r24, r30
    1496:	df 91       	pop	r29
    1498:	cf 91       	pop	r28
    149a:	08 95       	ret

0000149c <free>:
    149c:	cf 93       	push	r28
    149e:	df 93       	push	r29
    14a0:	00 97       	sbiw	r24, 0x00	; 0
    14a2:	09 f4       	brne	.+2      	; 0x14a6 <free+0xa>
    14a4:	87 c0       	rjmp	.+270    	; 0x15b4 <free+0x118>
    14a6:	fc 01       	movw	r30, r24
    14a8:	32 97       	sbiw	r30, 0x02	; 2
    14aa:	13 82       	std	Z+3, r1	; 0x03
    14ac:	12 82       	std	Z+2, r1	; 0x02
    14ae:	c0 91 c4 03 	lds	r28, 0x03C4
    14b2:	d0 91 c5 03 	lds	r29, 0x03C5
    14b6:	20 97       	sbiw	r28, 0x00	; 0
    14b8:	81 f4       	brne	.+32     	; 0x14da <free+0x3e>
    14ba:	20 81       	ld	r18, Z
    14bc:	31 81       	ldd	r19, Z+1	; 0x01
    14be:	28 0f       	add	r18, r24
    14c0:	39 1f       	adc	r19, r25
    14c2:	80 91 c2 03 	lds	r24, 0x03C2
    14c6:	90 91 c3 03 	lds	r25, 0x03C3
    14ca:	82 17       	cp	r24, r18
    14cc:	93 07       	cpc	r25, r19
    14ce:	79 f5       	brne	.+94     	; 0x152e <free+0x92>
    14d0:	f0 93 c3 03 	sts	0x03C3, r31
    14d4:	e0 93 c2 03 	sts	0x03C2, r30
    14d8:	6d c0       	rjmp	.+218    	; 0x15b4 <free+0x118>
    14da:	de 01       	movw	r26, r28
    14dc:	20 e0       	ldi	r18, 0x00	; 0
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	ae 17       	cp	r26, r30
    14e2:	bf 07       	cpc	r27, r31
    14e4:	50 f4       	brcc	.+20     	; 0x14fa <free+0x5e>
    14e6:	12 96       	adiw	r26, 0x02	; 2
    14e8:	4d 91       	ld	r20, X+
    14ea:	5c 91       	ld	r21, X
    14ec:	13 97       	sbiw	r26, 0x03	; 3
    14ee:	9d 01       	movw	r18, r26
    14f0:	41 15       	cp	r20, r1
    14f2:	51 05       	cpc	r21, r1
    14f4:	09 f1       	breq	.+66     	; 0x1538 <free+0x9c>
    14f6:	da 01       	movw	r26, r20
    14f8:	f3 cf       	rjmp	.-26     	; 0x14e0 <free+0x44>
    14fa:	b3 83       	std	Z+3, r27	; 0x03
    14fc:	a2 83       	std	Z+2, r26	; 0x02
    14fe:	40 81       	ld	r20, Z
    1500:	51 81       	ldd	r21, Z+1	; 0x01
    1502:	84 0f       	add	r24, r20
    1504:	95 1f       	adc	r25, r21
    1506:	8a 17       	cp	r24, r26
    1508:	9b 07       	cpc	r25, r27
    150a:	71 f4       	brne	.+28     	; 0x1528 <free+0x8c>
    150c:	8d 91       	ld	r24, X+
    150e:	9c 91       	ld	r25, X
    1510:	11 97       	sbiw	r26, 0x01	; 1
    1512:	84 0f       	add	r24, r20
    1514:	95 1f       	adc	r25, r21
    1516:	02 96       	adiw	r24, 0x02	; 2
    1518:	91 83       	std	Z+1, r25	; 0x01
    151a:	80 83       	st	Z, r24
    151c:	12 96       	adiw	r26, 0x02	; 2
    151e:	8d 91       	ld	r24, X+
    1520:	9c 91       	ld	r25, X
    1522:	13 97       	sbiw	r26, 0x03	; 3
    1524:	93 83       	std	Z+3, r25	; 0x03
    1526:	82 83       	std	Z+2, r24	; 0x02
    1528:	21 15       	cp	r18, r1
    152a:	31 05       	cpc	r19, r1
    152c:	29 f4       	brne	.+10     	; 0x1538 <free+0x9c>
    152e:	f0 93 c5 03 	sts	0x03C5, r31
    1532:	e0 93 c4 03 	sts	0x03C4, r30
    1536:	3e c0       	rjmp	.+124    	; 0x15b4 <free+0x118>
    1538:	d9 01       	movw	r26, r18
    153a:	13 96       	adiw	r26, 0x03	; 3
    153c:	fc 93       	st	X, r31
    153e:	ee 93       	st	-X, r30
    1540:	12 97       	sbiw	r26, 0x02	; 2
    1542:	4d 91       	ld	r20, X+
    1544:	5d 91       	ld	r21, X+
    1546:	a4 0f       	add	r26, r20
    1548:	b5 1f       	adc	r27, r21
    154a:	ea 17       	cp	r30, r26
    154c:	fb 07       	cpc	r31, r27
    154e:	79 f4       	brne	.+30     	; 0x156e <free+0xd2>
    1550:	80 81       	ld	r24, Z
    1552:	91 81       	ldd	r25, Z+1	; 0x01
    1554:	84 0f       	add	r24, r20
    1556:	95 1f       	adc	r25, r21
    1558:	02 96       	adiw	r24, 0x02	; 2
    155a:	d9 01       	movw	r26, r18
    155c:	11 96       	adiw	r26, 0x01	; 1
    155e:	9c 93       	st	X, r25
    1560:	8e 93       	st	-X, r24
    1562:	82 81       	ldd	r24, Z+2	; 0x02
    1564:	93 81       	ldd	r25, Z+3	; 0x03
    1566:	13 96       	adiw	r26, 0x03	; 3
    1568:	9c 93       	st	X, r25
    156a:	8e 93       	st	-X, r24
    156c:	12 97       	sbiw	r26, 0x02	; 2
    156e:	e0 e0       	ldi	r30, 0x00	; 0
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	8a 81       	ldd	r24, Y+2	; 0x02
    1574:	9b 81       	ldd	r25, Y+3	; 0x03
    1576:	00 97       	sbiw	r24, 0x00	; 0
    1578:	19 f0       	breq	.+6      	; 0x1580 <free+0xe4>
    157a:	fe 01       	movw	r30, r28
    157c:	ec 01       	movw	r28, r24
    157e:	f9 cf       	rjmp	.-14     	; 0x1572 <free+0xd6>
    1580:	ce 01       	movw	r24, r28
    1582:	02 96       	adiw	r24, 0x02	; 2
    1584:	28 81       	ld	r18, Y
    1586:	39 81       	ldd	r19, Y+1	; 0x01
    1588:	82 0f       	add	r24, r18
    158a:	93 1f       	adc	r25, r19
    158c:	20 91 c2 03 	lds	r18, 0x03C2
    1590:	30 91 c3 03 	lds	r19, 0x03C3
    1594:	28 17       	cp	r18, r24
    1596:	39 07       	cpc	r19, r25
    1598:	69 f4       	brne	.+26     	; 0x15b4 <free+0x118>
    159a:	30 97       	sbiw	r30, 0x00	; 0
    159c:	29 f4       	brne	.+10     	; 0x15a8 <free+0x10c>
    159e:	10 92 c5 03 	sts	0x03C5, r1
    15a2:	10 92 c4 03 	sts	0x03C4, r1
    15a6:	02 c0       	rjmp	.+4      	; 0x15ac <free+0x110>
    15a8:	13 82       	std	Z+3, r1	; 0x03
    15aa:	12 82       	std	Z+2, r1	; 0x02
    15ac:	d0 93 c3 03 	sts	0x03C3, r29
    15b0:	c0 93 c2 03 	sts	0x03C2, r28
    15b4:	df 91       	pop	r29
    15b6:	cf 91       	pop	r28
    15b8:	08 95       	ret

000015ba <do_rand>:
    15ba:	8f 92       	push	r8
    15bc:	9f 92       	push	r9
    15be:	af 92       	push	r10
    15c0:	bf 92       	push	r11
    15c2:	cf 92       	push	r12
    15c4:	df 92       	push	r13
    15c6:	ef 92       	push	r14
    15c8:	ff 92       	push	r15
    15ca:	cf 93       	push	r28
    15cc:	df 93       	push	r29
    15ce:	ec 01       	movw	r28, r24
    15d0:	68 81       	ld	r22, Y
    15d2:	79 81       	ldd	r23, Y+1	; 0x01
    15d4:	8a 81       	ldd	r24, Y+2	; 0x02
    15d6:	9b 81       	ldd	r25, Y+3	; 0x03
    15d8:	61 15       	cp	r22, r1
    15da:	71 05       	cpc	r23, r1
    15dc:	81 05       	cpc	r24, r1
    15de:	91 05       	cpc	r25, r1
    15e0:	21 f4       	brne	.+8      	; 0x15ea <do_rand+0x30>
    15e2:	64 e2       	ldi	r22, 0x24	; 36
    15e4:	79 ed       	ldi	r23, 0xD9	; 217
    15e6:	8b e5       	ldi	r24, 0x5B	; 91
    15e8:	97 e0       	ldi	r25, 0x07	; 7
    15ea:	2d e1       	ldi	r18, 0x1D	; 29
    15ec:	33 ef       	ldi	r19, 0xF3	; 243
    15ee:	41 e0       	ldi	r20, 0x01	; 1
    15f0:	50 e0       	ldi	r21, 0x00	; 0
    15f2:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <__divmodsi4>
    15f6:	49 01       	movw	r8, r18
    15f8:	5a 01       	movw	r10, r20
    15fa:	9b 01       	movw	r18, r22
    15fc:	ac 01       	movw	r20, r24
    15fe:	a7 ea       	ldi	r26, 0xA7	; 167
    1600:	b1 e4       	ldi	r27, 0x41	; 65
    1602:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <__muluhisi3>
    1606:	6b 01       	movw	r12, r22
    1608:	7c 01       	movw	r14, r24
    160a:	ac ee       	ldi	r26, 0xEC	; 236
    160c:	b4 ef       	ldi	r27, 0xF4	; 244
    160e:	a5 01       	movw	r20, r10
    1610:	94 01       	movw	r18, r8
    1612:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <__mulohisi3>
    1616:	c6 0e       	add	r12, r22
    1618:	d7 1e       	adc	r13, r23
    161a:	e8 1e       	adc	r14, r24
    161c:	f9 1e       	adc	r15, r25
    161e:	f7 fe       	sbrs	r15, 7
    1620:	06 c0       	rjmp	.+12     	; 0x162e <do_rand+0x74>
    1622:	81 e0       	ldi	r24, 0x01	; 1
    1624:	c8 1a       	sub	r12, r24
    1626:	d1 08       	sbc	r13, r1
    1628:	e1 08       	sbc	r14, r1
    162a:	80 e8       	ldi	r24, 0x80	; 128
    162c:	f8 0a       	sbc	r15, r24
    162e:	c8 82       	st	Y, r12
    1630:	d9 82       	std	Y+1, r13	; 0x01
    1632:	ea 82       	std	Y+2, r14	; 0x02
    1634:	fb 82       	std	Y+3, r15	; 0x03
    1636:	c6 01       	movw	r24, r12
    1638:	9f 77       	andi	r25, 0x7F	; 127
    163a:	df 91       	pop	r29
    163c:	cf 91       	pop	r28
    163e:	ff 90       	pop	r15
    1640:	ef 90       	pop	r14
    1642:	df 90       	pop	r13
    1644:	cf 90       	pop	r12
    1646:	bf 90       	pop	r11
    1648:	af 90       	pop	r10
    164a:	9f 90       	pop	r9
    164c:	8f 90       	pop	r8
    164e:	08 95       	ret

00001650 <rand_r>:
    1650:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <do_rand>
    1654:	08 95       	ret

00001656 <rand>:
    1656:	86 e0       	ldi	r24, 0x06	; 6
    1658:	91 e0       	ldi	r25, 0x01	; 1
    165a:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <do_rand>
    165e:	08 95       	ret

00001660 <srand>:
    1660:	a0 e0       	ldi	r26, 0x00	; 0
    1662:	b0 e0       	ldi	r27, 0x00	; 0
    1664:	80 93 06 01 	sts	0x0106, r24
    1668:	90 93 07 01 	sts	0x0107, r25
    166c:	a0 93 08 01 	sts	0x0108, r26
    1670:	b0 93 09 01 	sts	0x0109, r27
    1674:	08 95       	ret

00001676 <toupper>:
    1676:	91 11       	cpse	r25, r1
    1678:	08 95       	ret
    167a:	81 56       	subi	r24, 0x61	; 97
    167c:	8a 51       	subi	r24, 0x1A	; 26
    167e:	08 f4       	brcc	.+2      	; 0x1682 <toupper+0xc>
    1680:	80 52       	subi	r24, 0x20	; 32
    1682:	85 58       	subi	r24, 0x85	; 133
    1684:	08 95       	ret

00001686 <fdevopen>:
    1686:	0f 93       	push	r16
    1688:	1f 93       	push	r17
    168a:	cf 93       	push	r28
    168c:	df 93       	push	r29
    168e:	ec 01       	movw	r28, r24
    1690:	8b 01       	movw	r16, r22
    1692:	00 97       	sbiw	r24, 0x00	; 0
    1694:	31 f4       	brne	.+12     	; 0x16a2 <fdevopen+0x1c>
    1696:	61 15       	cp	r22, r1
    1698:	71 05       	cpc	r23, r1
    169a:	19 f4       	brne	.+6      	; 0x16a2 <fdevopen+0x1c>
    169c:	80 e0       	ldi	r24, 0x00	; 0
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	38 c0       	rjmp	.+112    	; 0x1712 <fdevopen+0x8c>
    16a2:	6e e0       	ldi	r22, 0x0E	; 14
    16a4:	70 e0       	ldi	r23, 0x00	; 0
    16a6:	81 e0       	ldi	r24, 0x01	; 1
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <calloc>
    16ae:	fc 01       	movw	r30, r24
    16b0:	00 97       	sbiw	r24, 0x00	; 0
    16b2:	a1 f3       	breq	.-24     	; 0x169c <fdevopen+0x16>
    16b4:	80 e8       	ldi	r24, 0x80	; 128
    16b6:	83 83       	std	Z+3, r24	; 0x03
    16b8:	01 15       	cp	r16, r1
    16ba:	11 05       	cpc	r17, r1
    16bc:	71 f0       	breq	.+28     	; 0x16da <fdevopen+0x54>
    16be:	13 87       	std	Z+11, r17	; 0x0b
    16c0:	02 87       	std	Z+10, r16	; 0x0a
    16c2:	81 e8       	ldi	r24, 0x81	; 129
    16c4:	83 83       	std	Z+3, r24	; 0x03
    16c6:	80 91 c6 03 	lds	r24, 0x03C6
    16ca:	90 91 c7 03 	lds	r25, 0x03C7
    16ce:	89 2b       	or	r24, r25
    16d0:	21 f4       	brne	.+8      	; 0x16da <fdevopen+0x54>
    16d2:	f0 93 c7 03 	sts	0x03C7, r31
    16d6:	e0 93 c6 03 	sts	0x03C6, r30
    16da:	20 97       	sbiw	r28, 0x00	; 0
    16dc:	c9 f0       	breq	.+50     	; 0x1710 <fdevopen+0x8a>
    16de:	d1 87       	std	Z+9, r29	; 0x09
    16e0:	c0 87       	std	Z+8, r28	; 0x08
    16e2:	83 81       	ldd	r24, Z+3	; 0x03
    16e4:	82 60       	ori	r24, 0x02	; 2
    16e6:	83 83       	std	Z+3, r24	; 0x03
    16e8:	80 91 c8 03 	lds	r24, 0x03C8
    16ec:	90 91 c9 03 	lds	r25, 0x03C9
    16f0:	89 2b       	or	r24, r25
    16f2:	71 f4       	brne	.+28     	; 0x1710 <fdevopen+0x8a>
    16f4:	f0 93 c9 03 	sts	0x03C9, r31
    16f8:	e0 93 c8 03 	sts	0x03C8, r30
    16fc:	80 91 ca 03 	lds	r24, 0x03CA
    1700:	90 91 cb 03 	lds	r25, 0x03CB
    1704:	89 2b       	or	r24, r25
    1706:	21 f4       	brne	.+8      	; 0x1710 <fdevopen+0x8a>
    1708:	f0 93 cb 03 	sts	0x03CB, r31
    170c:	e0 93 ca 03 	sts	0x03CA, r30
    1710:	cf 01       	movw	r24, r30
    1712:	df 91       	pop	r29
    1714:	cf 91       	pop	r28
    1716:	1f 91       	pop	r17
    1718:	0f 91       	pop	r16
    171a:	08 95       	ret

0000171c <printf>:
    171c:	a0 e0       	ldi	r26, 0x00	; 0
    171e:	b0 e0       	ldi	r27, 0x00	; 0
    1720:	e4 e9       	ldi	r30, 0x94	; 148
    1722:	fb e0       	ldi	r31, 0x0B	; 11
    1724:	0c 94 82 0e 	jmp	0x1d04	; 0x1d04 <__prologue_saves__+0x20>
    1728:	fe 01       	movw	r30, r28
    172a:	35 96       	adiw	r30, 0x05	; 5
    172c:	61 91       	ld	r22, Z+
    172e:	71 91       	ld	r23, Z+
    1730:	af 01       	movw	r20, r30
    1732:	80 91 c8 03 	lds	r24, 0x03C8
    1736:	90 91 c9 03 	lds	r25, 0x03C9
    173a:	0e 94 cf 0b 	call	0x179e	; 0x179e <vfprintf>
    173e:	e2 e0       	ldi	r30, 0x02	; 2
    1740:	0c 94 9e 0e 	jmp	0x1d3c	; 0x1d3c <__epilogue_restores__+0x20>

00001744 <puts>:
    1744:	0f 93       	push	r16
    1746:	1f 93       	push	r17
    1748:	cf 93       	push	r28
    174a:	df 93       	push	r29
    174c:	e0 91 c8 03 	lds	r30, 0x03C8
    1750:	f0 91 c9 03 	lds	r31, 0x03C9
    1754:	23 81       	ldd	r18, Z+3	; 0x03
    1756:	21 ff       	sbrs	r18, 1
    1758:	1b c0       	rjmp	.+54     	; 0x1790 <puts+0x4c>
    175a:	ec 01       	movw	r28, r24
    175c:	00 e0       	ldi	r16, 0x00	; 0
    175e:	10 e0       	ldi	r17, 0x00	; 0
    1760:	89 91       	ld	r24, Y+
    1762:	60 91 c8 03 	lds	r22, 0x03C8
    1766:	70 91 c9 03 	lds	r23, 0x03C9
    176a:	db 01       	movw	r26, r22
    176c:	18 96       	adiw	r26, 0x08	; 8
    176e:	ed 91       	ld	r30, X+
    1770:	fc 91       	ld	r31, X
    1772:	19 97       	sbiw	r26, 0x09	; 9
    1774:	88 23       	and	r24, r24
    1776:	31 f0       	breq	.+12     	; 0x1784 <puts+0x40>
    1778:	09 95       	icall
    177a:	89 2b       	or	r24, r25
    177c:	89 f3       	breq	.-30     	; 0x1760 <puts+0x1c>
    177e:	0f ef       	ldi	r16, 0xFF	; 255
    1780:	1f ef       	ldi	r17, 0xFF	; 255
    1782:	ee cf       	rjmp	.-36     	; 0x1760 <puts+0x1c>
    1784:	8a e0       	ldi	r24, 0x0A	; 10
    1786:	09 95       	icall
    1788:	89 2b       	or	r24, r25
    178a:	11 f4       	brne	.+4      	; 0x1790 <puts+0x4c>
    178c:	c8 01       	movw	r24, r16
    178e:	02 c0       	rjmp	.+4      	; 0x1794 <puts+0x50>
    1790:	8f ef       	ldi	r24, 0xFF	; 255
    1792:	9f ef       	ldi	r25, 0xFF	; 255
    1794:	df 91       	pop	r29
    1796:	cf 91       	pop	r28
    1798:	1f 91       	pop	r17
    179a:	0f 91       	pop	r16
    179c:	08 95       	ret

0000179e <vfprintf>:
    179e:	ac e0       	ldi	r26, 0x0C	; 12
    17a0:	b0 e0       	ldi	r27, 0x00	; 0
    17a2:	e5 ed       	ldi	r30, 0xD5	; 213
    17a4:	fb e0       	ldi	r31, 0x0B	; 11
    17a6:	0c 94 72 0e 	jmp	0x1ce4	; 0x1ce4 <__prologue_saves__>
    17aa:	7c 01       	movw	r14, r24
    17ac:	6b 01       	movw	r12, r22
    17ae:	8a 01       	movw	r16, r20
    17b0:	fc 01       	movw	r30, r24
    17b2:	17 82       	std	Z+7, r1	; 0x07
    17b4:	16 82       	std	Z+6, r1	; 0x06
    17b6:	83 81       	ldd	r24, Z+3	; 0x03
    17b8:	81 ff       	sbrs	r24, 1
    17ba:	bd c1       	rjmp	.+890    	; 0x1b36 <vfprintf+0x398>
    17bc:	ce 01       	movw	r24, r28
    17be:	01 96       	adiw	r24, 0x01	; 1
    17c0:	4c 01       	movw	r8, r24
    17c2:	f7 01       	movw	r30, r14
    17c4:	93 81       	ldd	r25, Z+3	; 0x03
    17c6:	f6 01       	movw	r30, r12
    17c8:	93 fd       	sbrc	r25, 3
    17ca:	85 91       	lpm	r24, Z+
    17cc:	93 ff       	sbrs	r25, 3
    17ce:	81 91       	ld	r24, Z+
    17d0:	6f 01       	movw	r12, r30
    17d2:	88 23       	and	r24, r24
    17d4:	09 f4       	brne	.+2      	; 0x17d8 <vfprintf+0x3a>
    17d6:	ab c1       	rjmp	.+854    	; 0x1b2e <vfprintf+0x390>
    17d8:	85 32       	cpi	r24, 0x25	; 37
    17da:	39 f4       	brne	.+14     	; 0x17ea <vfprintf+0x4c>
    17dc:	93 fd       	sbrc	r25, 3
    17de:	85 91       	lpm	r24, Z+
    17e0:	93 ff       	sbrs	r25, 3
    17e2:	81 91       	ld	r24, Z+
    17e4:	6f 01       	movw	r12, r30
    17e6:	85 32       	cpi	r24, 0x25	; 37
    17e8:	29 f4       	brne	.+10     	; 0x17f4 <vfprintf+0x56>
    17ea:	b7 01       	movw	r22, r14
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <fputc>
    17f2:	e7 cf       	rjmp	.-50     	; 0x17c2 <vfprintf+0x24>
    17f4:	51 2c       	mov	r5, r1
    17f6:	31 2c       	mov	r3, r1
    17f8:	20 e0       	ldi	r18, 0x00	; 0
    17fa:	20 32       	cpi	r18, 0x20	; 32
    17fc:	a0 f4       	brcc	.+40     	; 0x1826 <vfprintf+0x88>
    17fe:	8b 32       	cpi	r24, 0x2B	; 43
    1800:	69 f0       	breq	.+26     	; 0x181c <vfprintf+0x7e>
    1802:	30 f4       	brcc	.+12     	; 0x1810 <vfprintf+0x72>
    1804:	80 32       	cpi	r24, 0x20	; 32
    1806:	59 f0       	breq	.+22     	; 0x181e <vfprintf+0x80>
    1808:	83 32       	cpi	r24, 0x23	; 35
    180a:	69 f4       	brne	.+26     	; 0x1826 <vfprintf+0x88>
    180c:	20 61       	ori	r18, 0x10	; 16
    180e:	2c c0       	rjmp	.+88     	; 0x1868 <vfprintf+0xca>
    1810:	8d 32       	cpi	r24, 0x2D	; 45
    1812:	39 f0       	breq	.+14     	; 0x1822 <vfprintf+0x84>
    1814:	80 33       	cpi	r24, 0x30	; 48
    1816:	39 f4       	brne	.+14     	; 0x1826 <vfprintf+0x88>
    1818:	21 60       	ori	r18, 0x01	; 1
    181a:	26 c0       	rjmp	.+76     	; 0x1868 <vfprintf+0xca>
    181c:	22 60       	ori	r18, 0x02	; 2
    181e:	24 60       	ori	r18, 0x04	; 4
    1820:	23 c0       	rjmp	.+70     	; 0x1868 <vfprintf+0xca>
    1822:	28 60       	ori	r18, 0x08	; 8
    1824:	21 c0       	rjmp	.+66     	; 0x1868 <vfprintf+0xca>
    1826:	27 fd       	sbrc	r18, 7
    1828:	27 c0       	rjmp	.+78     	; 0x1878 <vfprintf+0xda>
    182a:	30 ed       	ldi	r19, 0xD0	; 208
    182c:	38 0f       	add	r19, r24
    182e:	3a 30       	cpi	r19, 0x0A	; 10
    1830:	78 f4       	brcc	.+30     	; 0x1850 <vfprintf+0xb2>
    1832:	26 ff       	sbrs	r18, 6
    1834:	06 c0       	rjmp	.+12     	; 0x1842 <vfprintf+0xa4>
    1836:	fa e0       	ldi	r31, 0x0A	; 10
    1838:	5f 9e       	mul	r5, r31
    183a:	30 0d       	add	r19, r0
    183c:	11 24       	eor	r1, r1
    183e:	53 2e       	mov	r5, r19
    1840:	13 c0       	rjmp	.+38     	; 0x1868 <vfprintf+0xca>
    1842:	8a e0       	ldi	r24, 0x0A	; 10
    1844:	38 9e       	mul	r3, r24
    1846:	30 0d       	add	r19, r0
    1848:	11 24       	eor	r1, r1
    184a:	33 2e       	mov	r3, r19
    184c:	20 62       	ori	r18, 0x20	; 32
    184e:	0c c0       	rjmp	.+24     	; 0x1868 <vfprintf+0xca>
    1850:	8e 32       	cpi	r24, 0x2E	; 46
    1852:	21 f4       	brne	.+8      	; 0x185c <vfprintf+0xbe>
    1854:	26 fd       	sbrc	r18, 6
    1856:	6b c1       	rjmp	.+726    	; 0x1b2e <vfprintf+0x390>
    1858:	20 64       	ori	r18, 0x40	; 64
    185a:	06 c0       	rjmp	.+12     	; 0x1868 <vfprintf+0xca>
    185c:	8c 36       	cpi	r24, 0x6C	; 108
    185e:	11 f4       	brne	.+4      	; 0x1864 <vfprintf+0xc6>
    1860:	20 68       	ori	r18, 0x80	; 128
    1862:	02 c0       	rjmp	.+4      	; 0x1868 <vfprintf+0xca>
    1864:	88 36       	cpi	r24, 0x68	; 104
    1866:	41 f4       	brne	.+16     	; 0x1878 <vfprintf+0xda>
    1868:	f6 01       	movw	r30, r12
    186a:	93 fd       	sbrc	r25, 3
    186c:	85 91       	lpm	r24, Z+
    186e:	93 ff       	sbrs	r25, 3
    1870:	81 91       	ld	r24, Z+
    1872:	6f 01       	movw	r12, r30
    1874:	81 11       	cpse	r24, r1
    1876:	c1 cf       	rjmp	.-126    	; 0x17fa <vfprintf+0x5c>
    1878:	98 2f       	mov	r25, r24
    187a:	9f 7d       	andi	r25, 0xDF	; 223
    187c:	95 54       	subi	r25, 0x45	; 69
    187e:	93 30       	cpi	r25, 0x03	; 3
    1880:	28 f4       	brcc	.+10     	; 0x188c <vfprintf+0xee>
    1882:	0c 5f       	subi	r16, 0xFC	; 252
    1884:	1f 4f       	sbci	r17, 0xFF	; 255
    1886:	ff e3       	ldi	r31, 0x3F	; 63
    1888:	f9 83       	std	Y+1, r31	; 0x01
    188a:	0d c0       	rjmp	.+26     	; 0x18a6 <vfprintf+0x108>
    188c:	83 36       	cpi	r24, 0x63	; 99
    188e:	31 f0       	breq	.+12     	; 0x189c <vfprintf+0xfe>
    1890:	83 37       	cpi	r24, 0x73	; 115
    1892:	71 f0       	breq	.+28     	; 0x18b0 <vfprintf+0x112>
    1894:	83 35       	cpi	r24, 0x53	; 83
    1896:	09 f0       	breq	.+2      	; 0x189a <vfprintf+0xfc>
    1898:	5b c0       	rjmp	.+182    	; 0x1950 <vfprintf+0x1b2>
    189a:	22 c0       	rjmp	.+68     	; 0x18e0 <vfprintf+0x142>
    189c:	f8 01       	movw	r30, r16
    189e:	80 81       	ld	r24, Z
    18a0:	89 83       	std	Y+1, r24	; 0x01
    18a2:	0e 5f       	subi	r16, 0xFE	; 254
    18a4:	1f 4f       	sbci	r17, 0xFF	; 255
    18a6:	44 24       	eor	r4, r4
    18a8:	43 94       	inc	r4
    18aa:	51 2c       	mov	r5, r1
    18ac:	54 01       	movw	r10, r8
    18ae:	15 c0       	rjmp	.+42     	; 0x18da <vfprintf+0x13c>
    18b0:	38 01       	movw	r6, r16
    18b2:	f2 e0       	ldi	r31, 0x02	; 2
    18b4:	6f 0e       	add	r6, r31
    18b6:	71 1c       	adc	r7, r1
    18b8:	f8 01       	movw	r30, r16
    18ba:	a0 80       	ld	r10, Z
    18bc:	b1 80       	ldd	r11, Z+1	; 0x01
    18be:	26 ff       	sbrs	r18, 6
    18c0:	03 c0       	rjmp	.+6      	; 0x18c8 <vfprintf+0x12a>
    18c2:	65 2d       	mov	r22, r5
    18c4:	70 e0       	ldi	r23, 0x00	; 0
    18c6:	02 c0       	rjmp	.+4      	; 0x18cc <vfprintf+0x12e>
    18c8:	6f ef       	ldi	r22, 0xFF	; 255
    18ca:	7f ef       	ldi	r23, 0xFF	; 255
    18cc:	c5 01       	movw	r24, r10
    18ce:	2c 87       	std	Y+12, r18	; 0x0c
    18d0:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <strnlen>
    18d4:	2c 01       	movw	r4, r24
    18d6:	83 01       	movw	r16, r6
    18d8:	2c 85       	ldd	r18, Y+12	; 0x0c
    18da:	2f 77       	andi	r18, 0x7F	; 127
    18dc:	22 2e       	mov	r2, r18
    18de:	17 c0       	rjmp	.+46     	; 0x190e <vfprintf+0x170>
    18e0:	38 01       	movw	r6, r16
    18e2:	f2 e0       	ldi	r31, 0x02	; 2
    18e4:	6f 0e       	add	r6, r31
    18e6:	71 1c       	adc	r7, r1
    18e8:	f8 01       	movw	r30, r16
    18ea:	a0 80       	ld	r10, Z
    18ec:	b1 80       	ldd	r11, Z+1	; 0x01
    18ee:	26 ff       	sbrs	r18, 6
    18f0:	03 c0       	rjmp	.+6      	; 0x18f8 <vfprintf+0x15a>
    18f2:	65 2d       	mov	r22, r5
    18f4:	70 e0       	ldi	r23, 0x00	; 0
    18f6:	02 c0       	rjmp	.+4      	; 0x18fc <vfprintf+0x15e>
    18f8:	6f ef       	ldi	r22, 0xFF	; 255
    18fa:	7f ef       	ldi	r23, 0xFF	; 255
    18fc:	c5 01       	movw	r24, r10
    18fe:	2c 87       	std	Y+12, r18	; 0x0c
    1900:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <strnlen_P>
    1904:	2c 01       	movw	r4, r24
    1906:	2c 85       	ldd	r18, Y+12	; 0x0c
    1908:	20 68       	ori	r18, 0x80	; 128
    190a:	22 2e       	mov	r2, r18
    190c:	83 01       	movw	r16, r6
    190e:	23 fc       	sbrc	r2, 3
    1910:	1b c0       	rjmp	.+54     	; 0x1948 <vfprintf+0x1aa>
    1912:	83 2d       	mov	r24, r3
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	48 16       	cp	r4, r24
    1918:	59 06       	cpc	r5, r25
    191a:	b0 f4       	brcc	.+44     	; 0x1948 <vfprintf+0x1aa>
    191c:	b7 01       	movw	r22, r14
    191e:	80 e2       	ldi	r24, 0x20	; 32
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <fputc>
    1926:	3a 94       	dec	r3
    1928:	f4 cf       	rjmp	.-24     	; 0x1912 <vfprintf+0x174>
    192a:	f5 01       	movw	r30, r10
    192c:	27 fc       	sbrc	r2, 7
    192e:	85 91       	lpm	r24, Z+
    1930:	27 fe       	sbrs	r2, 7
    1932:	81 91       	ld	r24, Z+
    1934:	5f 01       	movw	r10, r30
    1936:	b7 01       	movw	r22, r14
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <fputc>
    193e:	31 10       	cpse	r3, r1
    1940:	3a 94       	dec	r3
    1942:	f1 e0       	ldi	r31, 0x01	; 1
    1944:	4f 1a       	sub	r4, r31
    1946:	51 08       	sbc	r5, r1
    1948:	41 14       	cp	r4, r1
    194a:	51 04       	cpc	r5, r1
    194c:	71 f7       	brne	.-36     	; 0x192a <vfprintf+0x18c>
    194e:	e5 c0       	rjmp	.+458    	; 0x1b1a <vfprintf+0x37c>
    1950:	84 36       	cpi	r24, 0x64	; 100
    1952:	11 f0       	breq	.+4      	; 0x1958 <vfprintf+0x1ba>
    1954:	89 36       	cpi	r24, 0x69	; 105
    1956:	39 f5       	brne	.+78     	; 0x19a6 <vfprintf+0x208>
    1958:	f8 01       	movw	r30, r16
    195a:	27 ff       	sbrs	r18, 7
    195c:	07 c0       	rjmp	.+14     	; 0x196c <vfprintf+0x1ce>
    195e:	60 81       	ld	r22, Z
    1960:	71 81       	ldd	r23, Z+1	; 0x01
    1962:	82 81       	ldd	r24, Z+2	; 0x02
    1964:	93 81       	ldd	r25, Z+3	; 0x03
    1966:	0c 5f       	subi	r16, 0xFC	; 252
    1968:	1f 4f       	sbci	r17, 0xFF	; 255
    196a:	08 c0       	rjmp	.+16     	; 0x197c <vfprintf+0x1de>
    196c:	60 81       	ld	r22, Z
    196e:	71 81       	ldd	r23, Z+1	; 0x01
    1970:	88 27       	eor	r24, r24
    1972:	77 fd       	sbrc	r23, 7
    1974:	80 95       	com	r24
    1976:	98 2f       	mov	r25, r24
    1978:	0e 5f       	subi	r16, 0xFE	; 254
    197a:	1f 4f       	sbci	r17, 0xFF	; 255
    197c:	2f 76       	andi	r18, 0x6F	; 111
    197e:	b2 2e       	mov	r11, r18
    1980:	97 ff       	sbrs	r25, 7
    1982:	09 c0       	rjmp	.+18     	; 0x1996 <vfprintf+0x1f8>
    1984:	90 95       	com	r25
    1986:	80 95       	com	r24
    1988:	70 95       	com	r23
    198a:	61 95       	neg	r22
    198c:	7f 4f       	sbci	r23, 0xFF	; 255
    198e:	8f 4f       	sbci	r24, 0xFF	; 255
    1990:	9f 4f       	sbci	r25, 0xFF	; 255
    1992:	20 68       	ori	r18, 0x80	; 128
    1994:	b2 2e       	mov	r11, r18
    1996:	2a e0       	ldi	r18, 0x0A	; 10
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	a4 01       	movw	r20, r8
    199c:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <__ultoa_invert>
    19a0:	a8 2e       	mov	r10, r24
    19a2:	a8 18       	sub	r10, r8
    19a4:	44 c0       	rjmp	.+136    	; 0x1a2e <vfprintf+0x290>
    19a6:	85 37       	cpi	r24, 0x75	; 117
    19a8:	29 f4       	brne	.+10     	; 0x19b4 <vfprintf+0x216>
    19aa:	2f 7e       	andi	r18, 0xEF	; 239
    19ac:	b2 2e       	mov	r11, r18
    19ae:	2a e0       	ldi	r18, 0x0A	; 10
    19b0:	30 e0       	ldi	r19, 0x00	; 0
    19b2:	25 c0       	rjmp	.+74     	; 0x19fe <vfprintf+0x260>
    19b4:	f2 2f       	mov	r31, r18
    19b6:	f9 7f       	andi	r31, 0xF9	; 249
    19b8:	bf 2e       	mov	r11, r31
    19ba:	8f 36       	cpi	r24, 0x6F	; 111
    19bc:	c1 f0       	breq	.+48     	; 0x19ee <vfprintf+0x250>
    19be:	18 f4       	brcc	.+6      	; 0x19c6 <vfprintf+0x228>
    19c0:	88 35       	cpi	r24, 0x58	; 88
    19c2:	79 f0       	breq	.+30     	; 0x19e2 <vfprintf+0x244>
    19c4:	b4 c0       	rjmp	.+360    	; 0x1b2e <vfprintf+0x390>
    19c6:	80 37       	cpi	r24, 0x70	; 112
    19c8:	19 f0       	breq	.+6      	; 0x19d0 <vfprintf+0x232>
    19ca:	88 37       	cpi	r24, 0x78	; 120
    19cc:	21 f0       	breq	.+8      	; 0x19d6 <vfprintf+0x238>
    19ce:	af c0       	rjmp	.+350    	; 0x1b2e <vfprintf+0x390>
    19d0:	2f 2f       	mov	r18, r31
    19d2:	20 61       	ori	r18, 0x10	; 16
    19d4:	b2 2e       	mov	r11, r18
    19d6:	b4 fe       	sbrs	r11, 4
    19d8:	0d c0       	rjmp	.+26     	; 0x19f4 <vfprintf+0x256>
    19da:	8b 2d       	mov	r24, r11
    19dc:	84 60       	ori	r24, 0x04	; 4
    19de:	b8 2e       	mov	r11, r24
    19e0:	09 c0       	rjmp	.+18     	; 0x19f4 <vfprintf+0x256>
    19e2:	24 ff       	sbrs	r18, 4
    19e4:	0a c0       	rjmp	.+20     	; 0x19fa <vfprintf+0x25c>
    19e6:	9f 2f       	mov	r25, r31
    19e8:	96 60       	ori	r25, 0x06	; 6
    19ea:	b9 2e       	mov	r11, r25
    19ec:	06 c0       	rjmp	.+12     	; 0x19fa <vfprintf+0x25c>
    19ee:	28 e0       	ldi	r18, 0x08	; 8
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	05 c0       	rjmp	.+10     	; 0x19fe <vfprintf+0x260>
    19f4:	20 e1       	ldi	r18, 0x10	; 16
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	02 c0       	rjmp	.+4      	; 0x19fe <vfprintf+0x260>
    19fa:	20 e1       	ldi	r18, 0x10	; 16
    19fc:	32 e0       	ldi	r19, 0x02	; 2
    19fe:	f8 01       	movw	r30, r16
    1a00:	b7 fe       	sbrs	r11, 7
    1a02:	07 c0       	rjmp	.+14     	; 0x1a12 <vfprintf+0x274>
    1a04:	60 81       	ld	r22, Z
    1a06:	71 81       	ldd	r23, Z+1	; 0x01
    1a08:	82 81       	ldd	r24, Z+2	; 0x02
    1a0a:	93 81       	ldd	r25, Z+3	; 0x03
    1a0c:	0c 5f       	subi	r16, 0xFC	; 252
    1a0e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a10:	06 c0       	rjmp	.+12     	; 0x1a1e <vfprintf+0x280>
    1a12:	60 81       	ld	r22, Z
    1a14:	71 81       	ldd	r23, Z+1	; 0x01
    1a16:	80 e0       	ldi	r24, 0x00	; 0
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	0e 5f       	subi	r16, 0xFE	; 254
    1a1c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a1e:	a4 01       	movw	r20, r8
    1a20:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <__ultoa_invert>
    1a24:	a8 2e       	mov	r10, r24
    1a26:	a8 18       	sub	r10, r8
    1a28:	fb 2d       	mov	r31, r11
    1a2a:	ff 77       	andi	r31, 0x7F	; 127
    1a2c:	bf 2e       	mov	r11, r31
    1a2e:	b6 fe       	sbrs	r11, 6
    1a30:	0b c0       	rjmp	.+22     	; 0x1a48 <vfprintf+0x2aa>
    1a32:	2b 2d       	mov	r18, r11
    1a34:	2e 7f       	andi	r18, 0xFE	; 254
    1a36:	a5 14       	cp	r10, r5
    1a38:	50 f4       	brcc	.+20     	; 0x1a4e <vfprintf+0x2b0>
    1a3a:	b4 fe       	sbrs	r11, 4
    1a3c:	0a c0       	rjmp	.+20     	; 0x1a52 <vfprintf+0x2b4>
    1a3e:	b2 fc       	sbrc	r11, 2
    1a40:	08 c0       	rjmp	.+16     	; 0x1a52 <vfprintf+0x2b4>
    1a42:	2b 2d       	mov	r18, r11
    1a44:	2e 7e       	andi	r18, 0xEE	; 238
    1a46:	05 c0       	rjmp	.+10     	; 0x1a52 <vfprintf+0x2b4>
    1a48:	7a 2c       	mov	r7, r10
    1a4a:	2b 2d       	mov	r18, r11
    1a4c:	03 c0       	rjmp	.+6      	; 0x1a54 <vfprintf+0x2b6>
    1a4e:	7a 2c       	mov	r7, r10
    1a50:	01 c0       	rjmp	.+2      	; 0x1a54 <vfprintf+0x2b6>
    1a52:	75 2c       	mov	r7, r5
    1a54:	24 ff       	sbrs	r18, 4
    1a56:	0d c0       	rjmp	.+26     	; 0x1a72 <vfprintf+0x2d4>
    1a58:	fe 01       	movw	r30, r28
    1a5a:	ea 0d       	add	r30, r10
    1a5c:	f1 1d       	adc	r31, r1
    1a5e:	80 81       	ld	r24, Z
    1a60:	80 33       	cpi	r24, 0x30	; 48
    1a62:	11 f4       	brne	.+4      	; 0x1a68 <vfprintf+0x2ca>
    1a64:	29 7e       	andi	r18, 0xE9	; 233
    1a66:	09 c0       	rjmp	.+18     	; 0x1a7a <vfprintf+0x2dc>
    1a68:	22 ff       	sbrs	r18, 2
    1a6a:	06 c0       	rjmp	.+12     	; 0x1a78 <vfprintf+0x2da>
    1a6c:	73 94       	inc	r7
    1a6e:	73 94       	inc	r7
    1a70:	04 c0       	rjmp	.+8      	; 0x1a7a <vfprintf+0x2dc>
    1a72:	82 2f       	mov	r24, r18
    1a74:	86 78       	andi	r24, 0x86	; 134
    1a76:	09 f0       	breq	.+2      	; 0x1a7a <vfprintf+0x2dc>
    1a78:	73 94       	inc	r7
    1a7a:	23 fd       	sbrc	r18, 3
    1a7c:	13 c0       	rjmp	.+38     	; 0x1aa4 <vfprintf+0x306>
    1a7e:	20 ff       	sbrs	r18, 0
    1a80:	06 c0       	rjmp	.+12     	; 0x1a8e <vfprintf+0x2f0>
    1a82:	5a 2c       	mov	r5, r10
    1a84:	73 14       	cp	r7, r3
    1a86:	18 f4       	brcc	.+6      	; 0x1a8e <vfprintf+0x2f0>
    1a88:	53 0c       	add	r5, r3
    1a8a:	57 18       	sub	r5, r7
    1a8c:	73 2c       	mov	r7, r3
    1a8e:	73 14       	cp	r7, r3
    1a90:	68 f4       	brcc	.+26     	; 0x1aac <vfprintf+0x30e>
    1a92:	b7 01       	movw	r22, r14
    1a94:	80 e2       	ldi	r24, 0x20	; 32
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	2c 87       	std	Y+12, r18	; 0x0c
    1a9a:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <fputc>
    1a9e:	73 94       	inc	r7
    1aa0:	2c 85       	ldd	r18, Y+12	; 0x0c
    1aa2:	f5 cf       	rjmp	.-22     	; 0x1a8e <vfprintf+0x2f0>
    1aa4:	73 14       	cp	r7, r3
    1aa6:	10 f4       	brcc	.+4      	; 0x1aac <vfprintf+0x30e>
    1aa8:	37 18       	sub	r3, r7
    1aaa:	01 c0       	rjmp	.+2      	; 0x1aae <vfprintf+0x310>
    1aac:	31 2c       	mov	r3, r1
    1aae:	24 ff       	sbrs	r18, 4
    1ab0:	12 c0       	rjmp	.+36     	; 0x1ad6 <vfprintf+0x338>
    1ab2:	b7 01       	movw	r22, r14
    1ab4:	80 e3       	ldi	r24, 0x30	; 48
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	2c 87       	std	Y+12, r18	; 0x0c
    1aba:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <fputc>
    1abe:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ac0:	22 ff       	sbrs	r18, 2
    1ac2:	17 c0       	rjmp	.+46     	; 0x1af2 <vfprintf+0x354>
    1ac4:	21 ff       	sbrs	r18, 1
    1ac6:	03 c0       	rjmp	.+6      	; 0x1ace <vfprintf+0x330>
    1ac8:	88 e5       	ldi	r24, 0x58	; 88
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	02 c0       	rjmp	.+4      	; 0x1ad2 <vfprintf+0x334>
    1ace:	88 e7       	ldi	r24, 0x78	; 120
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	b7 01       	movw	r22, r14
    1ad4:	0c c0       	rjmp	.+24     	; 0x1aee <vfprintf+0x350>
    1ad6:	82 2f       	mov	r24, r18
    1ad8:	86 78       	andi	r24, 0x86	; 134
    1ada:	59 f0       	breq	.+22     	; 0x1af2 <vfprintf+0x354>
    1adc:	21 fd       	sbrc	r18, 1
    1ade:	02 c0       	rjmp	.+4      	; 0x1ae4 <vfprintf+0x346>
    1ae0:	80 e2       	ldi	r24, 0x20	; 32
    1ae2:	01 c0       	rjmp	.+2      	; 0x1ae6 <vfprintf+0x348>
    1ae4:	8b e2       	ldi	r24, 0x2B	; 43
    1ae6:	27 fd       	sbrc	r18, 7
    1ae8:	8d e2       	ldi	r24, 0x2D	; 45
    1aea:	b7 01       	movw	r22, r14
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <fputc>
    1af2:	a5 14       	cp	r10, r5
    1af4:	38 f4       	brcc	.+14     	; 0x1b04 <vfprintf+0x366>
    1af6:	b7 01       	movw	r22, r14
    1af8:	80 e3       	ldi	r24, 0x30	; 48
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <fputc>
    1b00:	5a 94       	dec	r5
    1b02:	f7 cf       	rjmp	.-18     	; 0x1af2 <vfprintf+0x354>
    1b04:	aa 94       	dec	r10
    1b06:	f4 01       	movw	r30, r8
    1b08:	ea 0d       	add	r30, r10
    1b0a:	f1 1d       	adc	r31, r1
    1b0c:	80 81       	ld	r24, Z
    1b0e:	b7 01       	movw	r22, r14
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <fputc>
    1b16:	a1 10       	cpse	r10, r1
    1b18:	f5 cf       	rjmp	.-22     	; 0x1b04 <vfprintf+0x366>
    1b1a:	33 20       	and	r3, r3
    1b1c:	09 f4       	brne	.+2      	; 0x1b20 <vfprintf+0x382>
    1b1e:	51 ce       	rjmp	.-862    	; 0x17c2 <vfprintf+0x24>
    1b20:	b7 01       	movw	r22, r14
    1b22:	80 e2       	ldi	r24, 0x20	; 32
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <fputc>
    1b2a:	3a 94       	dec	r3
    1b2c:	f6 cf       	rjmp	.-20     	; 0x1b1a <vfprintf+0x37c>
    1b2e:	f7 01       	movw	r30, r14
    1b30:	86 81       	ldd	r24, Z+6	; 0x06
    1b32:	97 81       	ldd	r25, Z+7	; 0x07
    1b34:	02 c0       	rjmp	.+4      	; 0x1b3a <vfprintf+0x39c>
    1b36:	8f ef       	ldi	r24, 0xFF	; 255
    1b38:	9f ef       	ldi	r25, 0xFF	; 255
    1b3a:	2c 96       	adiw	r28, 0x0c	; 12
    1b3c:	e2 e1       	ldi	r30, 0x12	; 18
    1b3e:	0c 94 8e 0e 	jmp	0x1d1c	; 0x1d1c <__epilogue_restores__>

00001b42 <calloc>:
    1b42:	0f 93       	push	r16
    1b44:	1f 93       	push	r17
    1b46:	cf 93       	push	r28
    1b48:	df 93       	push	r29
    1b4a:	86 9f       	mul	r24, r22
    1b4c:	80 01       	movw	r16, r0
    1b4e:	87 9f       	mul	r24, r23
    1b50:	10 0d       	add	r17, r0
    1b52:	96 9f       	mul	r25, r22
    1b54:	10 0d       	add	r17, r0
    1b56:	11 24       	eor	r1, r1
    1b58:	c8 01       	movw	r24, r16
    1b5a:	0e 94 b6 09 	call	0x136c	; 0x136c <malloc>
    1b5e:	ec 01       	movw	r28, r24
    1b60:	00 97       	sbiw	r24, 0x00	; 0
    1b62:	29 f0       	breq	.+10     	; 0x1b6e <calloc+0x2c>
    1b64:	a8 01       	movw	r20, r16
    1b66:	60 e0       	ldi	r22, 0x00	; 0
    1b68:	70 e0       	ldi	r23, 0x00	; 0
    1b6a:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <memset>
    1b6e:	ce 01       	movw	r24, r28
    1b70:	df 91       	pop	r29
    1b72:	cf 91       	pop	r28
    1b74:	1f 91       	pop	r17
    1b76:	0f 91       	pop	r16
    1b78:	08 95       	ret

00001b7a <strnlen_P>:
    1b7a:	fc 01       	movw	r30, r24
    1b7c:	05 90       	lpm	r0, Z+
    1b7e:	61 50       	subi	r22, 0x01	; 1
    1b80:	70 40       	sbci	r23, 0x00	; 0
    1b82:	01 10       	cpse	r0, r1
    1b84:	d8 f7       	brcc	.-10     	; 0x1b7c <strnlen_P+0x2>
    1b86:	80 95       	com	r24
    1b88:	90 95       	com	r25
    1b8a:	8e 0f       	add	r24, r30
    1b8c:	9f 1f       	adc	r25, r31
    1b8e:	08 95       	ret

00001b90 <memset>:
    1b90:	dc 01       	movw	r26, r24
    1b92:	01 c0       	rjmp	.+2      	; 0x1b96 <memset+0x6>
    1b94:	6d 93       	st	X+, r22
    1b96:	41 50       	subi	r20, 0x01	; 1
    1b98:	50 40       	sbci	r21, 0x00	; 0
    1b9a:	e0 f7       	brcc	.-8      	; 0x1b94 <memset+0x4>
    1b9c:	08 95       	ret

00001b9e <strnlen>:
    1b9e:	fc 01       	movw	r30, r24
    1ba0:	61 50       	subi	r22, 0x01	; 1
    1ba2:	70 40       	sbci	r23, 0x00	; 0
    1ba4:	01 90       	ld	r0, Z+
    1ba6:	01 10       	cpse	r0, r1
    1ba8:	d8 f7       	brcc	.-10     	; 0x1ba0 <strnlen+0x2>
    1baa:	80 95       	com	r24
    1bac:	90 95       	com	r25
    1bae:	8e 0f       	add	r24, r30
    1bb0:	9f 1f       	adc	r25, r31
    1bb2:	08 95       	ret

00001bb4 <fputc>:
    1bb4:	0f 93       	push	r16
    1bb6:	1f 93       	push	r17
    1bb8:	cf 93       	push	r28
    1bba:	df 93       	push	r29
    1bbc:	18 2f       	mov	r17, r24
    1bbe:	09 2f       	mov	r16, r25
    1bc0:	eb 01       	movw	r28, r22
    1bc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc4:	81 fd       	sbrc	r24, 1
    1bc6:	03 c0       	rjmp	.+6      	; 0x1bce <fputc+0x1a>
    1bc8:	8f ef       	ldi	r24, 0xFF	; 255
    1bca:	9f ef       	ldi	r25, 0xFF	; 255
    1bcc:	20 c0       	rjmp	.+64     	; 0x1c0e <fputc+0x5a>
    1bce:	82 ff       	sbrs	r24, 2
    1bd0:	10 c0       	rjmp	.+32     	; 0x1bf2 <fputc+0x3e>
    1bd2:	4e 81       	ldd	r20, Y+6	; 0x06
    1bd4:	5f 81       	ldd	r21, Y+7	; 0x07
    1bd6:	2c 81       	ldd	r18, Y+4	; 0x04
    1bd8:	3d 81       	ldd	r19, Y+5	; 0x05
    1bda:	42 17       	cp	r20, r18
    1bdc:	53 07       	cpc	r21, r19
    1bde:	7c f4       	brge	.+30     	; 0x1bfe <fputc+0x4a>
    1be0:	e8 81       	ld	r30, Y
    1be2:	f9 81       	ldd	r31, Y+1	; 0x01
    1be4:	9f 01       	movw	r18, r30
    1be6:	2f 5f       	subi	r18, 0xFF	; 255
    1be8:	3f 4f       	sbci	r19, 0xFF	; 255
    1bea:	39 83       	std	Y+1, r19	; 0x01
    1bec:	28 83       	st	Y, r18
    1bee:	10 83       	st	Z, r17
    1bf0:	06 c0       	rjmp	.+12     	; 0x1bfe <fputc+0x4a>
    1bf2:	e8 85       	ldd	r30, Y+8	; 0x08
    1bf4:	f9 85       	ldd	r31, Y+9	; 0x09
    1bf6:	81 2f       	mov	r24, r17
    1bf8:	09 95       	icall
    1bfa:	89 2b       	or	r24, r25
    1bfc:	29 f7       	brne	.-54     	; 0x1bc8 <fputc+0x14>
    1bfe:	2e 81       	ldd	r18, Y+6	; 0x06
    1c00:	3f 81       	ldd	r19, Y+7	; 0x07
    1c02:	2f 5f       	subi	r18, 0xFF	; 255
    1c04:	3f 4f       	sbci	r19, 0xFF	; 255
    1c06:	3f 83       	std	Y+7, r19	; 0x07
    1c08:	2e 83       	std	Y+6, r18	; 0x06
    1c0a:	81 2f       	mov	r24, r17
    1c0c:	90 2f       	mov	r25, r16
    1c0e:	df 91       	pop	r29
    1c10:	cf 91       	pop	r28
    1c12:	1f 91       	pop	r17
    1c14:	0f 91       	pop	r16
    1c16:	08 95       	ret

00001c18 <__ultoa_invert>:
    1c18:	fa 01       	movw	r30, r20
    1c1a:	aa 27       	eor	r26, r26
    1c1c:	28 30       	cpi	r18, 0x08	; 8
    1c1e:	51 f1       	breq	.+84     	; 0x1c74 <__ultoa_invert+0x5c>
    1c20:	20 31       	cpi	r18, 0x10	; 16
    1c22:	81 f1       	breq	.+96     	; 0x1c84 <__ultoa_invert+0x6c>
    1c24:	e8 94       	clt
    1c26:	6f 93       	push	r22
    1c28:	6e 7f       	andi	r22, 0xFE	; 254
    1c2a:	6e 5f       	subi	r22, 0xFE	; 254
    1c2c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c2e:	8f 4f       	sbci	r24, 0xFF	; 255
    1c30:	9f 4f       	sbci	r25, 0xFF	; 255
    1c32:	af 4f       	sbci	r26, 0xFF	; 255
    1c34:	b1 e0       	ldi	r27, 0x01	; 1
    1c36:	3e d0       	rcall	.+124    	; 0x1cb4 <__ultoa_invert+0x9c>
    1c38:	b4 e0       	ldi	r27, 0x04	; 4
    1c3a:	3c d0       	rcall	.+120    	; 0x1cb4 <__ultoa_invert+0x9c>
    1c3c:	67 0f       	add	r22, r23
    1c3e:	78 1f       	adc	r23, r24
    1c40:	89 1f       	adc	r24, r25
    1c42:	9a 1f       	adc	r25, r26
    1c44:	a1 1d       	adc	r26, r1
    1c46:	68 0f       	add	r22, r24
    1c48:	79 1f       	adc	r23, r25
    1c4a:	8a 1f       	adc	r24, r26
    1c4c:	91 1d       	adc	r25, r1
    1c4e:	a1 1d       	adc	r26, r1
    1c50:	6a 0f       	add	r22, r26
    1c52:	71 1d       	adc	r23, r1
    1c54:	81 1d       	adc	r24, r1
    1c56:	91 1d       	adc	r25, r1
    1c58:	a1 1d       	adc	r26, r1
    1c5a:	20 d0       	rcall	.+64     	; 0x1c9c <__ultoa_invert+0x84>
    1c5c:	09 f4       	brne	.+2      	; 0x1c60 <__ultoa_invert+0x48>
    1c5e:	68 94       	set
    1c60:	3f 91       	pop	r19
    1c62:	2a e0       	ldi	r18, 0x0A	; 10
    1c64:	26 9f       	mul	r18, r22
    1c66:	11 24       	eor	r1, r1
    1c68:	30 19       	sub	r19, r0
    1c6a:	30 5d       	subi	r19, 0xD0	; 208
    1c6c:	31 93       	st	Z+, r19
    1c6e:	de f6       	brtc	.-74     	; 0x1c26 <__ultoa_invert+0xe>
    1c70:	cf 01       	movw	r24, r30
    1c72:	08 95       	ret
    1c74:	46 2f       	mov	r20, r22
    1c76:	47 70       	andi	r20, 0x07	; 7
    1c78:	40 5d       	subi	r20, 0xD0	; 208
    1c7a:	41 93       	st	Z+, r20
    1c7c:	b3 e0       	ldi	r27, 0x03	; 3
    1c7e:	0f d0       	rcall	.+30     	; 0x1c9e <__ultoa_invert+0x86>
    1c80:	c9 f7       	brne	.-14     	; 0x1c74 <__ultoa_invert+0x5c>
    1c82:	f6 cf       	rjmp	.-20     	; 0x1c70 <__ultoa_invert+0x58>
    1c84:	46 2f       	mov	r20, r22
    1c86:	4f 70       	andi	r20, 0x0F	; 15
    1c88:	40 5d       	subi	r20, 0xD0	; 208
    1c8a:	4a 33       	cpi	r20, 0x3A	; 58
    1c8c:	18 f0       	brcs	.+6      	; 0x1c94 <__ultoa_invert+0x7c>
    1c8e:	49 5d       	subi	r20, 0xD9	; 217
    1c90:	31 fd       	sbrc	r19, 1
    1c92:	40 52       	subi	r20, 0x20	; 32
    1c94:	41 93       	st	Z+, r20
    1c96:	02 d0       	rcall	.+4      	; 0x1c9c <__ultoa_invert+0x84>
    1c98:	a9 f7       	brne	.-22     	; 0x1c84 <__ultoa_invert+0x6c>
    1c9a:	ea cf       	rjmp	.-44     	; 0x1c70 <__ultoa_invert+0x58>
    1c9c:	b4 e0       	ldi	r27, 0x04	; 4
    1c9e:	a6 95       	lsr	r26
    1ca0:	97 95       	ror	r25
    1ca2:	87 95       	ror	r24
    1ca4:	77 95       	ror	r23
    1ca6:	67 95       	ror	r22
    1ca8:	ba 95       	dec	r27
    1caa:	c9 f7       	brne	.-14     	; 0x1c9e <__ultoa_invert+0x86>
    1cac:	00 97       	sbiw	r24, 0x00	; 0
    1cae:	61 05       	cpc	r22, r1
    1cb0:	71 05       	cpc	r23, r1
    1cb2:	08 95       	ret
    1cb4:	9b 01       	movw	r18, r22
    1cb6:	ac 01       	movw	r20, r24
    1cb8:	0a 2e       	mov	r0, r26
    1cba:	06 94       	lsr	r0
    1cbc:	57 95       	ror	r21
    1cbe:	47 95       	ror	r20
    1cc0:	37 95       	ror	r19
    1cc2:	27 95       	ror	r18
    1cc4:	ba 95       	dec	r27
    1cc6:	c9 f7       	brne	.-14     	; 0x1cba <__ultoa_invert+0xa2>
    1cc8:	62 0f       	add	r22, r18
    1cca:	73 1f       	adc	r23, r19
    1ccc:	84 1f       	adc	r24, r20
    1cce:	95 1f       	adc	r25, r21
    1cd0:	a0 1d       	adc	r26, r0
    1cd2:	08 95       	ret

00001cd4 <__mulshisi3>:
    1cd4:	b7 ff       	sbrs	r27, 7
    1cd6:	0c 94 7a 09 	jmp	0x12f4	; 0x12f4 <__muluhisi3>

00001cda <__mulohisi3>:
    1cda:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <__muluhisi3>
    1cde:	82 1b       	sub	r24, r18
    1ce0:	93 0b       	sbc	r25, r19
    1ce2:	08 95       	ret

00001ce4 <__prologue_saves__>:
    1ce4:	2f 92       	push	r2
    1ce6:	3f 92       	push	r3
    1ce8:	4f 92       	push	r4
    1cea:	5f 92       	push	r5
    1cec:	6f 92       	push	r6
    1cee:	7f 92       	push	r7
    1cf0:	8f 92       	push	r8
    1cf2:	9f 92       	push	r9
    1cf4:	af 92       	push	r10
    1cf6:	bf 92       	push	r11
    1cf8:	cf 92       	push	r12
    1cfa:	df 92       	push	r13
    1cfc:	ef 92       	push	r14
    1cfe:	ff 92       	push	r15
    1d00:	0f 93       	push	r16
    1d02:	1f 93       	push	r17
    1d04:	cf 93       	push	r28
    1d06:	df 93       	push	r29
    1d08:	cd b7       	in	r28, 0x3d	; 61
    1d0a:	de b7       	in	r29, 0x3e	; 62
    1d0c:	ca 1b       	sub	r28, r26
    1d0e:	db 0b       	sbc	r29, r27
    1d10:	0f b6       	in	r0, 0x3f	; 63
    1d12:	f8 94       	cli
    1d14:	de bf       	out	0x3e, r29	; 62
    1d16:	0f be       	out	0x3f, r0	; 63
    1d18:	cd bf       	out	0x3d, r28	; 61
    1d1a:	09 94       	ijmp

00001d1c <__epilogue_restores__>:
    1d1c:	2a 88       	ldd	r2, Y+18	; 0x12
    1d1e:	39 88       	ldd	r3, Y+17	; 0x11
    1d20:	48 88       	ldd	r4, Y+16	; 0x10
    1d22:	5f 84       	ldd	r5, Y+15	; 0x0f
    1d24:	6e 84       	ldd	r6, Y+14	; 0x0e
    1d26:	7d 84       	ldd	r7, Y+13	; 0x0d
    1d28:	8c 84       	ldd	r8, Y+12	; 0x0c
    1d2a:	9b 84       	ldd	r9, Y+11	; 0x0b
    1d2c:	aa 84       	ldd	r10, Y+10	; 0x0a
    1d2e:	b9 84       	ldd	r11, Y+9	; 0x09
    1d30:	c8 84       	ldd	r12, Y+8	; 0x08
    1d32:	df 80       	ldd	r13, Y+7	; 0x07
    1d34:	ee 80       	ldd	r14, Y+6	; 0x06
    1d36:	fd 80       	ldd	r15, Y+5	; 0x05
    1d38:	0c 81       	ldd	r16, Y+4	; 0x04
    1d3a:	1b 81       	ldd	r17, Y+3	; 0x03
    1d3c:	aa 81       	ldd	r26, Y+2	; 0x02
    1d3e:	b9 81       	ldd	r27, Y+1	; 0x01
    1d40:	ce 0f       	add	r28, r30
    1d42:	d1 1d       	adc	r29, r1
    1d44:	0f b6       	in	r0, 0x3f	; 63
    1d46:	f8 94       	cli
    1d48:	de bf       	out	0x3e, r29	; 62
    1d4a:	0f be       	out	0x3f, r0	; 63
    1d4c:	cd bf       	out	0x3d, r28	; 61
    1d4e:	ed 01       	movw	r28, r26
    1d50:	08 95       	ret

00001d52 <_exit>:
    1d52:	f8 94       	cli

00001d54 <__stop_program>:
    1d54:	ff cf       	rjmp	.-2      	; 0x1d54 <__stop_program>
